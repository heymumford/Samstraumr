#!/usr/bin/env bash
#==============================================================================
# s8r-test: Simplified test runner for Samstraumr
# Provides a streamlined interface for running different test types
#==============================================================================
set -e

# Find repository root
PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel)}"

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

# Functions for prettier output
info() { echo -e "${BLUE}$1${RESET}"; }
success() { echo -e "${GREEN}$1${RESET}"; }
error() { echo -e "${RED}Error: $1${RESET}" >&2; exit 1; }
warn() { echo -e "${YELLOW}Warning: $1${RESET}" >&2; }

# Determine Maven settings
MVN_OPTS=""
if [ -n "$MAVEN_MEMORY_OPTS" ]; then
  MVN_OPTS="$MAVEN_MEMORY_OPTS"
else
  MVN_OPTS="-Xmx1g"
fi
export MAVEN_OPTS="$MVN_OPTS"

# Parse arguments
parse_args() {
  TEST_TYPE="all"
  VERBOSE=false
  SKIP_QUALITY=false
  OUTPUT_FILE=""
  PARALLEL=false
  COVERAGE=false
  CUSTOM_TAGS=""
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -p|--parallel)
        PARALLEL=true
        shift
        ;;
      --coverage)
        COVERAGE=true
        shift
        ;;
      --skip-quality)
        SKIP_QUALITY=true
        shift
        ;;
      -o|--output)
        if [[ -n "$2" && "$2" != -* ]]; then
          OUTPUT_FILE="$2"
          shift 2
        else
          error "Output file path missing after -o/--output"
        fi
        ;;
      --tags)
        if [[ -n "$2" && "$2" != -* ]]; then
          CUSTOM_TAGS="$2"
          shift 2
        else
          error "Tag expression missing after --tags"
        fi
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        TEST_TYPE="$1"
        shift
        ;;
    esac
  done
}

# Display help information
show_help() {
  echo -e "${BOLD}Samstraumr Test Runner${RESET}"
  echo
  echo "Usage: ./s8r-test [options] [test-type]"
  echo
  echo "Options:"
  echo "  -v, --verbose           Enable verbose output"
  echo "  -p, --parallel          Run tests in parallel (where supported)"
  echo "  --coverage              Run tests with code coverage analysis"
  echo "  --skip-quality          Skip quality checks"
  echo "  -o, --output <file>     Write test output to file"
  echo "  --tags <expression>     Run tests with specific tags (e.g. \"@Functional and @Identity\")"
  echo "  -h, --help              Show this help message"
  echo
  echo "Standard Test Types:"
  echo "  unit                    Run unit (L0) tests"
  echo "  component               Run component (L1) tests"
  echo "  integration             Run integration (L2) tests"
  echo "  system                  Run system (L3) tests"
  echo "  all                     Run all tests (default)"
  echo
  echo "Functionality Test Types:"
  echo "  functional              Run core functionality tests (former ATL)"
  echo "  error-handling          Run error handling tests (former BTL)"
  echo "  dataflow                Run data flow tests"
  echo "  state                   Run state management tests"
  echo "  identity                Run identity-related tests"
  echo "  monitoring              Run monitoring/observability tests"
  echo "  lifecycle               Run lifecycle tests"
  echo "  resilience              Run resilience tests"
  echo
  echo "Legacy Test Types (backwards compatibility):"
  echo "  tube                    Run tube tests (maps to unit)"
  echo "  composite               Run composite tests (maps to component)"
  echo "  flow                    Run flow tests (maps to dataflow)"
  echo "  machine                 Run machine tests (maps to integration)"
  echo "  atl                     Run Above-The-Line tests (maps to functional)"
  echo "  btl                     Run Below-The-Line tests (maps to error-handling)"
  echo "  adam                    Run Adam tube tests (specific test case)"
  echo
  echo "Examples:"
  echo "  ./s8r-test                                # Run all tests"
  echo "  ./s8r-test unit                           # Run unit tests"
  echo "  ./s8r-test functional                     # Run core functionality tests"
  echo "  ./s8r-test --tags \"@L1_Component and @DataFlow\"  # Run component data flow tests"
  echo "  ./s8r-test -v component                   # Run component tests verbosely"
}

# Map test type to appropriate tag expressions
map_test_type() {
  local test_type="$1"
  local tags=""
  
  # Handle custom tags first
  if [[ -n "$CUSTOM_TAGS" ]]; then
    tags="$CUSTOM_TAGS"
    return 0
  fi
  
  # Otherwise map the test type to tags
  case "$test_type" in
    # Standard test types (pyramid levels)
    unit)
      tags="@L0_Unit or @L0_Tube"
      ;;
    component)
      tags="@L1_Component or @L1_Composite"
      ;;
    integration)
      tags="@L2_Integration or @L2_Machine"
      ;;
    system)
      tags="@L3_System"
      ;;
      
    # Test types by functionality
    functional)
      tags="@Functional or @ATL"
      ;;
    error-handling)
      tags="@ErrorHandling or @BTL"
      ;;
    dataflow)
      tags="@DataFlow or @Flow"
      ;;
    state)
      tags="@State"
      ;;
    identity)
      tags="@Identity"
      ;;
    monitoring)
      tags="@Monitoring or @Awareness"
      ;;
    lifecycle)
      tags="@Lifecycle or @Init or @Runtime or @Termination"
      ;;
    resilience)
      tags="@Resilience or @CircuitBreaker"
      ;;
      
    # Legacy test types (backward compatibility)
    tube)
      tags="@L0_Unit or @L0_Tube or @TubeTest"
      ;;
    composite)
      tags="@L1_Component or @L1_Composite or @CompositeTest"
      ;;
    flow)
      tags="@DataFlow or @Flow"
      ;;
    machine)
      tags="@L2_Integration or @L2_Machine or @MachineTest"
      ;;
    atl)
      tags="@Functional or @ATL"
      ;;
    btl)
      tags="@ErrorHandling or @BTL"
      ;;
    adam)
      tags="@AdamTube"
      ;;
    all)
      tags="not @disabled"
      ;;
    *)
      warn "Unknown test type: $test_type. Using it as a tag."
      tags="@$test_type"
      ;;
  esac
  
  echo "$tags"
}

# Core test function
run_tests() {
  # Map test type to tags
  local tags=$(map_test_type "$TEST_TYPE")
  
  # Construct Maven command based on arguments
  local mvn_args=("test")
  
  # Add cucumber tags if available
  if [[ -n "$tags" ]]; then
    mvn_args+=("-Dcucumber.filter.tags=\"$tags\"")
  fi
  
  # Use the appropriate test runner based on test type
  case "$TEST_TYPE" in
    component|composite)
      mvn_args+=("-Dtest=RunCompositeTests")
      ;;
    unit|tube)
      mvn_args+=("-Dtest=RunTubeTests")
      ;;
    integration|machine)
      mvn_args+=("-Dtest=RunMachineTests")
      ;;
    *)
      mvn_args+=("-Dtest=RunCucumberTest")
      ;;
  esac
  
  # Add quality skip if requested
  if $SKIP_QUALITY; then
    mvn_args+=("-Dskip.quality.checks=true")
  fi
  
  # Explicitly enable tests regardless of other profiles
  mvn_args+=("-DskipTests=false")
  mvn_args+=("-Dmaven.test.skip=false")
  
  # Add parallel execution if requested
  if $PARALLEL; then
    mvn_args+=("-Dsurefire.parallel=classes")
    mvn_args+=("-Dsurefire.threadCount=4")
    info "Parallel test execution enabled"
  fi
  
  # Add coverage if requested
  if $COVERAGE; then
    mvn_args+=("jacoco:prepare-agent")
    info "Code coverage analysis enabled"
  fi
  
  # Add verbose flag if requested
  if $VERBOSE; then
    mvn_args+=("-e")
  else
    mvn_args+=("-q")
  fi
  
  # Display test information
  info "Running $TEST_TYPE tests..."
  info "Tags: $tags"
  
  # Handle output redirection
  cd "$PROJECT_ROOT"
  
  # Use custom settings.xml file to ensure tests aren't skipped
  if [ ! -f "${PROJECT_ROOT}/surefire-settings.xml" ]; then
    cat > "${PROJECT_ROOT}/surefire-settings.xml" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <activeProfiles>
    <activeProfile>test-enabler</activeProfile>
  </activeProfiles>
  <profiles>
    <profile>
      <id>test-enabler</id>
      <properties>
        <skipTests>false</skipTests>
        <maven.test.skip>false</maven.test.skip>
      </properties>
    </profile>
  </profiles>
</settings>
EOF
  fi
  
  info "Running: mvn ${mvn_args[*]} -s surefire-settings.xml"
  
  if [[ -n "$OUTPUT_FILE" ]]; then
    info "Writing output to: $OUTPUT_FILE"
    if mvn "${mvn_args[@]}" -s "${PROJECT_ROOT}/surefire-settings.xml" | tee "$OUTPUT_FILE"; then
      success "Tests completed successfully"
      return 0
    else
      error "Tests failed"
      info "See test output in: $OUTPUT_FILE"
      return 1
    fi
  else
    if mvn "${mvn_args[@]}" -s "${PROJECT_ROOT}/surefire-settings.xml"; then
      success "Tests completed successfully"
      return 0
    else
      error "Tests failed"
      return 1
    fi
  fi
}

# Main execution
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

parse_args "$@"
run_tests