#!/usr/bin/env bash
#==============================================================================
# s8r-build: Simplified build tool for Samstraumr
# Provides a streamlined interface for building the project with different modes
#==============================================================================
set -e

# Find repository root
PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel)}"

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

# Functions for prettier output
info() { echo -e "${BLUE}$1${RESET}"; }
success() { echo -e "${GREEN}$1${RESET}"; }
error() { echo -e "${RED}Error: $1${RESET}" >&2; exit 1; }
warn() { echo -e "${YELLOW}Warning: $1${RESET}" >&2; }

# Determine Maven settings
MVN_OPTS=""
if [ -n "$MAVEN_MEMORY_OPTS" ]; then
  MVN_OPTS="$MAVEN_MEMORY_OPTS"
else
  MVN_OPTS="-Xmx1g"
fi
export MAVEN_OPTS="$MVN_OPTS"

# Parse arguments
parse_args() {
  MODE="fast"
  CLEAN=false
  VERBOSE=false
  SKIP_QUALITY=false
  PARALLEL=false
  RUN_CI=false
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c|--clean)
        CLEAN=true
        shift
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -p|--parallel)
        PARALLEL=true
        shift
        ;;
      --skip-quality)
        SKIP_QUALITY=true
        shift
        ;;
      --ci)
        RUN_CI=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        if [[ "$1" == "fast" || "$1" == "test" || "$1" == "package" || "$1" == "install" || "$1" == "compile" || "$1" == "full" || "$1" == "docs" || "$1" == "site" ]]; then
          MODE="$1"
        else
          error "Unknown argument: $1"
        fi
        shift
        ;;
    esac
  done
}

# Display help information
show_help() {
  echo -e "${BOLD}Samstraumr Build Tool${RESET}"
  echo
  echo "Usage: ./s8r-build [options] [mode]"
  echo
  echo "Options:"
  echo "  -c, --clean             Clean before building"
  echo "  -v, --verbose           Enable verbose output"
  echo "  -p, --parallel          Build in parallel where possible"
  echo "  --skip-quality          Skip quality checks"
  echo "  --ci                    Run local CI checks after build"
  echo "  -h, --help              Show this help message"
  echo
  echo "Modes:"
  echo "  fast                    Fast build with tests and quality checks skipped (default)"
  echo "  test                    Build and run tests"
  echo "  package                 Create JAR package"
  echo "  install                 Install to local Maven repository"
  echo "  compile                 Compile only"
  echo "  full                    Full build including tests, quality checks, and site"
  echo "  docs                    Generate project documentation"
  echo "  site                    Generate Maven site"
  echo
  echo "Examples:"
  echo "  ./s8r-build                     # Fast build (skip tests and quality checks)"
  echo "  ./s8r-build test                # Build and run tests"
  echo "  ./s8r-build -c package          # Clean and package"
}

# Core build function
build() {
  # Construct Maven command based on arguments
  local mvn_args=()
  
  # Add clean if requested
  if $CLEAN; then
    mvn_args+=("clean")
  fi
  
  # Add mode-specific goals and options
  case "$MODE" in
    fast)
      mvn_args+=("compile")
      mvn_args+=("-DskipTests")
      # Always skip quality checks in fast mode
      mvn_args+=("-Dskip.quality.checks=true")
      # Don't add -P fast since this causes test skipping
      ;;
    compile)
      mvn_args+=("compile")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    test)
      mvn_args+=("test")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    package)
      mvn_args+=("package")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    install)
      mvn_args+=("install")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    full)
      mvn_args+=("verify")
      # Site generation has issues, so we'll skip it for now
      ;;
    site)
      mvn_args+=("site:site")
      ;;
    docs)
      mvn_args+=("javadoc:javadoc")
      ;;
  esac
  
  # Add parallel flag if requested
  if $PARALLEL; then
    mvn_args+=("-T 1C") # Use 1 thread per core
    info "Parallel build enabled"
  fi
  
  # Add verbose flag if requested
  if $VERBOSE; then
    mvn_args+=("-e")
  else
    mvn_args+=("-q")
  fi
  
  # Display build information
  info "Building Samstraumr (mode: $MODE)"
  if $CLEAN; then
    info "Clean build enabled"
  fi
  if $SKIP_QUALITY; then
    info "Quality checks skipped"
  fi
  
  # Execute Maven with appropriate arguments
  cd "$PROJECT_ROOT"
  info "Running: mvn ${mvn_args[*]}"
  if mvn "${mvn_args[@]}"; then
    success "Build completed successfully"
    
    # Run CI checks if requested
    if $RUN_CI; then
      if [ -f "${PROJECT_ROOT}/s8r-ci" ]; then
        info "Running local CI checks..."
        if "${PROJECT_ROOT}/s8r-ci" --workflow local-pipeline.yml; then
          success "Local CI checks passed"
        else
          warn "Local CI checks failed"
          # Don't fail the build, just warn
        fi
      else
        warn "s8r-ci script not found. Skipping CI checks."
      fi
    fi
    
    return 0
  else
    error "Build failed"
    return 1
  fi
}

# Main execution
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

parse_args "$@"
build