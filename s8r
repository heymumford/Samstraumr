#!/usr/bin/env bash
#==============================================================================
# s8r: Unified command dispatcher for Samstraumr
# Single entry point for all build, test, and version management operations
#==============================================================================
set -e

# Determine script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export PROJECT_ROOT="${SCRIPT_DIR}"

# Create the library directory if it doesn't exist
if [ ! -d "${PROJECT_ROOT}/.s8r/lib" ]; then
  mkdir -p "${PROJECT_ROOT}/.s8r/lib"
fi

# Source common library
if [ ! -f "${PROJECT_ROOT}/.s8r/lib/common.sh" ]; then
  # Create it if it doesn't exist
  cat > "${PROJECT_ROOT}/.s8r/lib/common.sh" << 'EOF'
#!/usr/bin/env bash
#==============================================================================
# S8r Common Library Functions
# Shared code for the Samstraumr build system
#==============================================================================

# Find repository root
PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel)}"

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
BOLD='\033[1m'
RESET='\033[0m'

# Functions for prettier output
info() { echo -e "${BLUE}$1${RESET}"; }
success() { echo -e "${GREEN}$1${RESET}"; }
error() { echo -e "${RED}Error: $1${RESET}" >&2; exit 1; }
warn() { echo -e "${YELLOW}Warning: $1${RESET}" >&2; }
highlight() { echo -e "${CYAN}$1${RESET}"; }
important() { echo -e "${MAGENTA}$1${RESET}"; }

# Determine Maven settings
setup_maven_opts() {
  MVN_OPTS=""
  if [ -n "$MAVEN_MEMORY_OPTS" ]; then
    MVN_OPTS="$MAVEN_MEMORY_OPTS"
  else
    MVN_OPTS="-Xmx1g"
  fi
  export MAVEN_OPTS="$MVN_OPTS"
}

# Execute with timing information
time_exec() {
  local start_time=$(date +%s)
  "$@"
  local exit_code=$?
  local end_time=$(date +%s)
  local duration=$((end_time - start_time))
  
  if [ $duration -gt 60 ]; then
    local minutes=$((duration / 60))
    local seconds=$((duration % 60))
    echo -e "${YELLOW}Execution time: ${minutes}m ${seconds}s${RESET}"
  else
    echo -e "${YELLOW}Execution time: ${duration}s${RESET}"
  fi
  
  return $exit_code
}

# Check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check for required tools
check_requirements() {
  local missing=0
  
  for cmd in "$@"; do
    if ! command_exists "$cmd"; then
      echo -e "${RED}Required command not found: ${cmd}${RESET}" >&2
      missing=1
    fi
  done
  
  if [ $missing -eq 1 ]; then
    echo -e "${RED}Please install the missing requirements and try again.${RESET}" >&2
    exit 1
  fi
}

# Run Maven command with appropriate arguments
run_maven() {
  local cmd=("mvn")
  
  # Add arguments
  for arg in "$@"; do
    cmd+=("$arg")
  done
  
  # Display command
  echo -e "${BLUE}Running: ${cmd[*]}${RESET}"
  
  # Execute command
  if "${cmd[@]}"; then
    return 0
  else
    return 1
  fi
}

# Initialize common settings
setup_maven_opts
EOF
  chmod +x "${PROJECT_ROOT}/.s8r/lib/common.sh"
fi

source "${PROJECT_ROOT}/.s8r/lib/common.sh"

# Define user config directory
USER_CONFIG_DIR="${HOME}/.s8r"
USER_CONFIG_FILE="${USER_CONFIG_DIR}/config.json"

# Setup configuration directories
# User config in home directory
if [ ! -d "${USER_CONFIG_DIR}" ]; then
  mkdir -p "${USER_CONFIG_DIR}"
fi

# Project-level .s8r directory
PROJECT_CONFIG_DIR="${PROJECT_ROOT}/.s8r"
if [ ! -d "${PROJECT_CONFIG_DIR}" ]; then
  mkdir -p "${PROJECT_CONFIG_DIR}/config"
fi

# Project-level user directory (not tracked in Git)
PROJECT_USER_CONFIG_DIR="${PROJECT_CONFIG_DIR}/user"
if [ ! -d "${PROJECT_USER_CONFIG_DIR}" ]; then
  mkdir -p "${PROJECT_USER_CONFIG_DIR}"
fi

# Initialize variables
COMMAND=""
WATCH_MODE=false
PARALLEL=false
COVERAGE=false
COVERAGE_REPORT=false

# Display main help information
show_help() {
  echo -e "${BOLD}Samstraumr (S8r) Command Interface${RESET}"
  echo
  echo "Usage: ./s8r <command> [options] [arguments]"
  echo
  echo "Core Commands:"
  echo "  build            Build the project (fast, test, package, install, full)"
  echo "  test             Run tests (unit, component, integration, all...)"
  echo "  version          Manage version information"
  echo "  coverage         Run and manage code coverage"
  echo "  clean            Clean build artifacts"
  echo
  echo "Additional Commands:"
  echo "  quality          Run quality checks"
  echo "  report           Generate change management reports"
  echo "  docs             Generate documentation using Docmosis"
  echo "  test-docmosis    Run a smoke test for Docmosis integration"
  echo "  install          Initialize or update project configuration"
  echo "  hooks            Install or update git hooks"
  echo "  demo             Run demonstration scripts"
  echo "  help             Show help for a command"
  echo
  echo "Global Options:"
  echo "  --watch, -w      Watch mode (continuous execution)"
  echo "  --parallel, -p   Execute in parallel where supported"
  echo "  --help, -h       Show this help information"
  echo
  echo "Examples:"
  echo "  ./s8r build fast                  # Fast build"
  echo "  ./s8r test unit --parallel        # Run unit tests in parallel"
  echo "  ./s8r build-test                  # Build and test in one command"
  echo "  ./s8r coverage report             # Generate coverage report"
  echo "  ./s8r version bump minor          # Bump minor version"
  echo
  echo "For command-specific help, run:"
  echo "  ./s8r <command> --help"
}

# Parse global arguments
parse_global_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --watch|-w)
        WATCH_MODE=true
        shift
        ;;
      --parallel|-p)
        PARALLEL=true
        shift
        ;;
      --help|-h)
        show_help
        exit 0
        ;;
      build|test|version|clean|coverage|quality|report|docs|test-docmosis|install|hooks|demo)
        COMMAND="$1"
        shift
        break
        ;;
      build-test|build-test-package)
        COMMAND="build-test"
        shift
        break
        ;;
      *)
        error "Unknown command: $1. Run './s8r --help' for usage information."
        ;;
    esac
  done
  
  # Process command
  if [ -z "$COMMAND" ]; then
    show_help
    exit 0
  fi
  
  # Execute appropriate command with remaining arguments
  case "$COMMAND" in
    build)
      exec_build "$@"
      ;;
    test)
      exec_test "$@"
      ;;
    version)
      exec_version "$@"
      ;;
    clean)
      exec_clean "$@"
      ;;
    coverage)
      exec_coverage "$@"
      ;;
    quality)
      handle_quality_command "$@"
      ;;
    report)
      handle_report_command "$@"
      ;;
    docs)
      handle_docs_command "$@"
      ;;
    test-docmosis)
      handle_test_docmosis_command "$@"
      ;;
    install)
      handle_install_command "$@"
      ;;
    hooks)
      handle_hooks_command "$@"
      ;;
    demo)
      handle_demo_command "$@"
      ;;
    help)
      handle_help_command "$@"
      ;;
    build-test)
      exec_build_test "$@"
      ;;
    *)
      error "Implementation error: Command '$COMMAND' not handled."
      ;;
  esac
}

# Execute build command
exec_build() {
  if [ "$WATCH_MODE" = true ]; then
    if ! command_exists "entr"; then
      error "Watch mode requires 'entr'. Please install it and try again."
    fi
    
    info "Starting build in watch mode. Press Ctrl+C to stop."
    find "${PROJECT_ROOT}" -name "*.java" | entr -c "${SCRIPT_DIR}/s8r-build" "$@"
  elif [ "$PARALLEL" = true ]; then
    info "Running parallel build"
    "${SCRIPT_DIR}/s8r-build" --parallel "$@"
  else
    time_exec "${SCRIPT_DIR}/s8r-build" "$@"
  fi
}

# Execute test command
exec_test() {
  local test_args=("$@")
  
  if [ "$PARALLEL" = true ]; then
    test_args+=("--parallel")
  fi
  
  if [ "$COVERAGE" = true ]; then
    test_args+=("--coverage")
  fi
  
  if [ "$WATCH_MODE" = true ]; then
    if ! command_exists "entr"; then
      error "Watch mode requires 'entr'. Please install it and try again."
    fi
    
    info "Starting tests in watch mode. Press Ctrl+C to stop."
    find "${PROJECT_ROOT}" -name "*.java" | entr -c "${SCRIPT_DIR}/s8r-test" "${test_args[@]}"
  else
    time_exec "${SCRIPT_DIR}/s8r-test" "${test_args[@]}"
  fi
}

# Execute version command
exec_version() {
  time_exec "${SCRIPT_DIR}/s8r-version" "$@"
}

# Execute clean command
exec_clean() {
  info "Cleaning build artifacts"
  run_maven clean
  success "Clean completed"
}

# Execute combined build and test command
exec_build_test() {
  info "Running build followed by tests"
  # First build
  if ! exec_build "fast"; then
    error "Build failed - aborting test phase"
  fi
  
  # Then test
  exec_test "$@"
}

# Execute coverage command
exec_coverage() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_coverage_help
    return 0
  fi

  local coverage_cmd="${1:-report}"
  shift || true
  
  case "$coverage_cmd" in
    report)
      info "Generating code coverage report"
      run_maven test jacoco:report
      
      # Open report if generated successfully
      local report_path="${PROJECT_ROOT}/Samstraumr/samstraumr-core/target/site/jacoco/index.html"
      if [ -f "$report_path" ]; then
        success "Coverage report generated at: $report_path"
        
        # Try to open in browser if available
        if command_exists "xdg-open"; then
          xdg-open "$report_path"
        elif command_exists "open"; then
          open "$report_path"
        else
          info "Open the report manually at: $report_path"
        fi
      else
        error "Failed to generate coverage report"
      fi
      ;;
    run)
      # Run tests with coverage enabled
      COVERAGE=true
      exec_test "$@"
      ;;
    *)
      error "Unknown coverage command: $coverage_cmd. Valid commands: report, run"
      ;;
  esac
}

#------------------------------------------------------------------------------
# Retained Command Handlers from original s8r script
#------------------------------------------------------------------------------

function handle_quality_command() {
  # Set a variable to indicate we're calling from s8r
  export SAMSTRAUMR_CLI="s8r"
  
  local command="$1"
  shift
  
  case "$command" in
    check)
      # Run all quality checks
      print_header "Running All Quality Checks"
      "${PROJECT_ROOT}/util/bin/quality/check-encoding.sh" "$@"
      # Run Maven quality checks
      cd "${PROJECT_ROOT}" && mvn verify
      ;;
    spotless)
      # Run Spotless formatting check
      print_header "Running Spotless Formatting Check"
      local spotless_cmd="check"
      if [[ "$*" == *"-f"* || "$*" == *"--fix"* ]]; then
        spotless_cmd="apply"
      fi
      cd "${PROJECT_ROOT}" && mvn spotless:${spotless_cmd}
      ;;
    checkstyle)
      # Run CheckStyle code style check
      print_header "Running CheckStyle Code Style Check"
      cd "${PROJECT_ROOT}" && mvn checkstyle:check
      ;;
    spotbugs)
      # Run SpotBugs bug detection
      print_header "Running SpotBugs Bug Detection"
      cd "${PROJECT_ROOT}" && mvn spotbugs:check
      ;;
    jacoco)
      # Run JaCoCo code coverage analysis
      print_header "Running JaCoCo Code Coverage Analysis"
      cd "${PROJECT_ROOT}" && mvn test jacoco:report
      ;;
    encoding)
      # Check file encodings and line endings
      "${PROJECT_ROOT}/util/bin/quality/check-encoding.sh" "$@"
      ;;
    *)
      print_error "Unknown quality command: $command"
      show_quality_help
      return 1
      ;;
  esac
}

function handle_report_command() {
  # Check if Docmosis environment variable is set
  if [ -z "${DOCMOSIS_KEY}" ]; then
    print_error "DOCMOSIS_KEY environment variable is not set"
    echo "Set it with: export DOCMOSIS_KEY=your-license-key"
    return 1
  fi
  
  # Check if from-version and to-version are provided
  if [ $# -lt 2 ]; then
    print_error "Missing version arguments"
    show_report_help
    return 1
  fi
  
  # Get from-version and to-version
  local from_version="$1"
  local to_version="$2"
  shift 2
  
  # Check if Docmosis JARs are installed
  if [ ! -d "${PROJECT_ROOT}/lib/com/docmosis" ]; then
    print_warning "Docmosis JARs are not installed. Running install-docmosis.sh first."
    "${PROJECT_ROOT}/install-docmosis.sh"
    
    # Check if installation was successful
    if [ $? -ne 0 ]; then
      print_error "Failed to install Docmosis JARs"
      return 1
    fi
  fi
  
  # Run generate-change-report.sh with arguments
  "${PROJECT_ROOT}/util/bin/docs/generate-change-report.sh" "$from_version" "$to_version" "$@"
}

function handle_docs_command() {
  # Check if this is a help request
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_docs_help
    return 0
  fi
  
  # Verify Docmosis environment variables are set
  if [ -z "${DOCMOSIS_KEY}" ]; then
    print_warning "DOCMOSIS_KEY environment variable is not set"
    
    # Check if config file exists
    if [ -f "${USER_CONFIG_FILE}" ]; then
      print_info "Reading Docmosis key from config file: ${USER_CONFIG_FILE}"
      export DOCMOSIS_KEY=$(grep -o '"key": "[^"]*"' "${USER_CONFIG_FILE}" | cut -d'"' -f4)
      export DOCMOSIS_SITE=$(grep -o '"site": "[^"]*"' "${USER_CONFIG_FILE}" | cut -d'"' -f4)
    else
      print_error "Docmosis configuration not found. Please set up the config file at ${USER_CONFIG_FILE}"
      return 1
    fi
    
    # Verify we have the key now
    if [ -z "${DOCMOSIS_KEY}" ]; then
      print_error "Docmosis license key not found in config file"
      return 1
    else
      print_success "Docmosis license key loaded from config file"
    fi
  fi
  
  print_header "Generating Documentation with Docmosis"
  
  # Pass the environment variables to the script
  export DOCMOSIS_KEY
  export DOCMOSIS_SITE
  
  # Run generate-docmosis-docs.sh with arguments
  "${PROJECT_ROOT}/util/bin/docs/generate-docmosis-docs.sh" "$@"
  
  # Check result
  if [ $? -eq 0 ]; then
    print_success "Documentation generated successfully!"
  else
    print_error "Documentation generation failed"
    return 1
  fi
}

function handle_test_docmosis_command() {
  # Check if this is a help request
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_test_docmosis_help
    return 0
  fi
  
  # Verify Docmosis environment variables are set
  if [ -z "${DOCMOSIS_KEY}" ]; then
    print_warning "DOCMOSIS_KEY environment variable is not set"
    
    # Check if config file exists
    if [ -f "${USER_CONFIG_FILE}" ]; then
      print_info "Reading Docmosis key from config file: ${USER_CONFIG_FILE}"
      export DOCMOSIS_KEY=$(grep -o '"key": "[^"]*"' "${USER_CONFIG_FILE}" | cut -d'"' -f4)
      export DOCMOSIS_SITE=$(grep -o '"site": "[^"]*"' "${USER_CONFIG_FILE}" | cut -d'"' -f4)
    else
      print_error "Docmosis configuration not found. Please set up the config file at ${USER_CONFIG_FILE}"
      return 1
    fi
    
    # Verify we have the key now
    if [ -z "${DOCMOSIS_KEY}" ]; then
      print_error "Docmosis license key not found in config file"
      return 1
    else
      print_success "Docmosis license key loaded from config file"
    fi
  fi
  
  print_header "Running Docmosis Integration Test"
  
  # Pass the environment variables to the script
  export DOCMOSIS_KEY
  export DOCMOSIS_SITE
  
  # Run test-docmosis.sh script
  "${PROJECT_ROOT}/util/bin/docs/test-docmosis.sh" "$@"
  
  # Check result
  if [ $? -eq 0 ]; then
    print_success "Docmosis integration test passed!"
    return 0
  else
    print_error "Docmosis integration test failed"
    return 1
  fi
}

function handle_demo_command() {
  # Check if this is a help request
  if [[ "$1" == "-h" || "$1" == "--help" || -z "$1" ]]; then
    show_demo_help
    return 0
  fi
  
  local demo_name="$1"
  shift
  
  case "$demo_name" in
    identity)
      print_header "Running Tube Identity Demonstration"
      "${PROJECT_ROOT}/util/bin/demo/tube-identity-demo.sh" "$@"
      ;;
    list)
      print_header "Available Demonstrations"
      echo "- identity: Tube identity concepts demonstration"
      ;;
    *)
      print_error "Unknown demo: $demo_name"
      show_demo_help
      return 1
      ;;
  esac
  
  return 0
}

function handle_install_command() {
  # Check if this is a help request
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_install_help
    return 0
  fi
  
  # Determine if we should suppress the output header (avoid redundancy)
  # Check if verbose mode is enabled
  local is_verbose=false
  for arg in "$@"; do
    if [[ "$arg" == "-v" || "$arg" == "--verbose" ]]; then
      is_verbose=true
      break
    fi
  done
  
  # Only show our header if not in verbose mode
  if ! $is_verbose; then
    print_header "Running Configuration Installation"
  fi
  
  # Capture any important environment variables before running the script
  # This ensures that the environment doesn't get modified between runs
  local saved_docmosis_key="${DOCMOSIS_KEY}"
  local saved_docmosis_site="${DOCMOSIS_SITE}"
  
  # Prepare for the command execution
  local install_result=0
  
  # Run install-config.sh with all arguments
  if $is_verbose; then
    # In verbose mode, show all output
    "${PROJECT_ROOT}/util/bin/config/install-config.sh" "$@"
    install_result=$?
  else
    # In normal mode, filter noise but keep exit status
    set -o pipefail
    # Capture output to variable to avoid redundancy
    local output
    output=$(${PROJECT_ROOT}/util/bin/config/install-config.sh "$@" 2>&1)
    install_result=$?
    # If successful, filter and display the output
    if [ $install_result -eq 0 ]; then
      # Filter the output to remove common noise and duplication
      echo "$output" | grep -v "^$" | \
                       grep -v "===" | \
                       grep -v "config installed successfully" | \
                       grep -v "Installing Samstraumr Configuration" | \
                       grep -v "Directory already exists" | \
                       awk '!seen[$0]++' | \
                       sort
    else
      # Show full output in case of error
      echo "$output" | awk '!seen[$0]++'
    fi
    set +o pipefail
  fi
  
  # Restore environment if it was modified by the script
  if [ -n "${saved_docmosis_key}" ]; then
    export DOCMOSIS_KEY="${saved_docmosis_key}"
  fi
  if [ -n "${saved_docmosis_site}" ]; then
    export DOCMOSIS_SITE="${saved_docmosis_site}"
  fi
  
  # Check result
  if [ $install_result -eq 0 ]; then
    # Add consistent success message
    print_success "Samstraumr configuration installed successfully!"
    return 0
  else
    print_error "Samstraumr configuration installation failed"
    return 1
  fi
}

function handle_hooks_command() {
  # Check if this is a help request
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_hooks_help
    return 0
  fi
  
  # Parse options
  local force=false
  local verbose=false
  local list_only=false
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -f|--force)
        force=true
        shift
        ;;
      -v|--verbose)
        verbose=true
        shift
        ;;
      --list)
        list_only=true
        shift
        ;;
      *)
        print_error "Unknown option: $1"
        show_hooks_help
        return 1
        ;;
    esac
  done
  
  # Source directory for hooks
  local hooks_dir="${PROJECT_ROOT}/docs/contribution/git-hooks"
  local git_hooks_dir="${PROJECT_ROOT}/.git/hooks"
  
  print_header "Samstraumr Git Hooks"
  
  # Check if hooks directory exists
  if [ ! -d "$hooks_dir" ]; then
    print_error "Hooks directory not found: $hooks_dir"
    return 1
  fi
  
  # Just list hooks if requested
  if $list_only; then
    echo -e "${BOLD}Available Hooks:${RESET}"
    for hook in "$hooks_dir"/*; do
      if [ -f "$hook" ]; then
        hook_name=$(basename "$hook")
        echo "  - $hook_name"
        
        # Show a brief description if verbose
        if $verbose; then
          description=$(grep -m 1 "Purpose:" "$hook" | cut -d ":" -f 2- | sed 's/^ *//')
          if [ -n "$description" ]; then
            echo "      $description"
          fi
        fi
      fi
    done
    return 0
  fi
  
  # Create git hooks directory if it doesn't exist
  if [ ! -d "$git_hooks_dir" ]; then
    mkdir -p "$git_hooks_dir"
  fi
  
  # Install hooks
  local installed_count=0
  for hook in "$hooks_dir"/*; do
    if [ -f "$hook" ]; then
      hook_name=$(basename "$hook")
      target="$git_hooks_dir/$hook_name"
      
      # Check if hook already exists and we're not forcing
      if [ -f "$target" ] && ! $force; then
        if $verbose; then
          print_warning "Hook already exists: $hook_name (use --force to overwrite)"
        fi
        continue
      fi
      
      # Copy the hook and make it executable
      cp "$hook" "$target"
      chmod +x "$target"
      installed_count=$((installed_count + 1))
      
      if $verbose; then
        print_success "Installed hook: $hook_name"
      fi
    fi
  done
  
  if [ $installed_count -eq 0 ]; then
    print_warning "No hooks were installed. Use --force to overwrite existing hooks."
  else
    print_success "Installed $installed_count git hooks"
  fi
  
  # Show a brief message about what the hooks do
  echo ""
  echo -e "${BOLD}Hooks installed:${RESET}"
  echo "- prepare-commit-msg: Prevents AI assistant signatures in commit messages"
  
  return 0
}

function handle_help_command() {
  local help_topic="$1"
  shift
  
  case "$help_topic" in
    build)
      show_build_help
      ;;
    test)
      show_test_help
      ;;
    version)
      show_version_help
      ;;
    coverage)
      show_coverage_help
      ;;
    quality)
      show_quality_help
      ;;
    report)
      show_report_help
      ;;
    docs)
      show_docs_help
      ;;
    test-docmosis)
      show_test_docmosis_help
      ;;
    install)
      show_install_help
      ;;
    hooks)
      show_hooks_help
      ;;
    demo)
      show_demo_help
      ;;
    *)
      show_help
      ;;
  esac
}

#------------------------------------------------------------------------------
# Help Functions For Commands
#------------------------------------------------------------------------------

function show_build_help() {
  echo -e "${BOLD}Samstraumr Build${RESET} - Build the project with optimized settings"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r build [options] [mode]"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help                Display this help message"
  echo "  -v, --verbose             Enable verbose output"
  echo "  -c, --clean               Clean before building"
  echo "  -p, --parallel            Build in parallel where possible"
  echo "  --skip-quality            Skip quality checks"
  echo
  echo -e "${BOLD}MODES:${RESET}"
  echo "  fast                      Fast build with quality checks skipped (default)"
  echo "  compile                   Compile only"
  echo "  test                      Compile and run tests"
  echo "  package                   Create JAR package"
  echo "  install                   Install to local repository"
  echo "  full                      Full build including tests and verification"
  echo "  docs                      Generate project documentation"
  echo "  site                      Generate the Maven site"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  ./s8r build                     # Fast build"
  echo "  ./s8r build test                # Run tests"
  echo "  ./s8r build -c test             # Clean and run tests"
  echo "  ./s8r build --parallel full     # Run full build in parallel"
}

function show_test_help() {
  echo -e "${BOLD}Samstraumr Test${RESET} - Run tests with support for different test types"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r test [options] <test-type>"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help                    Display this help message"
  echo "  -v, --verbose                 Enable verbose output with test status reporting"
  echo "  -p, --parallel                Run tests in parallel (where supported)"
  echo "  --coverage                    Run tests with coverage analysis"
  echo "  -o, --output <file>           Write test output to file"
  echo
  echo -e "${BOLD}TEST TYPES:${RESET}"
  echo "  Industry Standard       |  Samstraumr Equivalent"
  echo "  --------------------    |  ----------------------"
  echo "  unit                    |  tube"
  echo "  component               |  composite"
  echo "  integration             |  flow"
  echo "  api                     |  machine"
  echo "  system                  |  stream"
  echo "  endtoend                |  acceptance"
  echo
  echo "  Special test types: all, atl, btl, adam"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  ./s8r test unit                     # Run unit tests only"
  echo "  ./s8r test --parallel component     # Run component tests in parallel"
  echo "  ./s8r test --coverage tube          # Run tube tests with coverage analysis"
  echo "  ./s8r test all                      # Run all tests"
}

function show_version_help() {
  echo -e "${BOLD}Samstraumr Version${RESET} - Manage project version"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r version <command> [options]"
  echo
  echo -e "${BOLD}COMMANDS:${RESET}"
  echo "  get                  Show current version information"
  echo "  bump <type>          Bump version (type: major, minor, patch)"
  echo "  set <version>        Set a specific version (format: x.y.z)"
  echo "  fix                  Fix version inconsistencies across project files"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  ./s8r version get                 # Show current version"
  echo "  ./s8r version bump patch          # Bump patch version"
  echo "  ./s8r version set 1.2.3           # Set version to 1.2.3"
  echo "  ./s8r version fix                 # Fix version inconsistencies"
}

function show_coverage_help() {
  echo -e "${BOLD}Samstraumr Coverage${RESET} - Run and manage code coverage"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r coverage <command> [options]"
  echo
  echo -e "${BOLD}COMMANDS:${RESET}"
  echo "  report               Generate coverage report (default)"
  echo "  run [test-type]      Run tests with coverage enabled"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  ./s8r coverage                 # Generate coverage report"
  echo "  ./s8r coverage report          # Generate coverage report"
  echo "  ./s8r coverage run unit        # Run unit tests with coverage"
}

function show_quality_help() {
  echo -e "${BOLD}Samstraumr Quality${RESET} - Run quality checks"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r quality <command> [options]"
  echo
  echo -e "${BOLD}COMMANDS:${RESET}"
  echo "  check                Run all quality checks"
  echo "  spotless             Run Spotless formatting check"
  echo "  checkstyle           Run CheckStyle code style check"
  echo "  spotbugs             Run SpotBugs bug detection"
  echo "  jacoco               Run JaCoCo code coverage analysis"
  echo "  encoding             Check file encodings and line endings"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
  echo "  -v, --verbose        Enable verbose output"
  echo "  -f, --fix            Fix issues automatically (where applicable)"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  ./s8r quality check               # Run all quality checks"
  echo "  ./s8r quality spotless -f         # Run Spotless and fix issues"
  echo "  ./s8r quality encoding -v         # Check encodings with verbose output"
}

function show_report_help() {
  echo -e "${BOLD}Samstraumr Report${RESET} - Generate change management reports"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r report <from-version> <to-version> [options]"
  echo
  echo -e "${BOLD}ARGUMENTS:${RESET}"
  echo "  from-version         Starting version (e.g., v1.2.8 or 1.2.8)"
  echo "  to-version           Ending version (e.g., v1.2.9, 1.2.9, or HEAD)"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
  echo "  -o, --output <dir>   Directory for report output (default: target/reports)"
  echo "  -f, --format <fmt>   Output format (pdf, docx, html) (default: docx)"
}

function show_docs_help() {
  echo -e "${BOLD}Samstraumr Docs${RESET} - Generate documentation using Docmosis"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r docs [options] [output-dir] [format]"
  echo
  echo -e "${BOLD}ARGUMENTS:${RESET}"
  echo "  output-dir           Optional output directory (default: target/docs)"
  echo "  format               Output format: pdf, docx, html (default: pdf)"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
}

function show_test_docmosis_help() {
  echo -e "${BOLD}Samstraumr Test Docmosis${RESET} - Run a smoke test for Docmosis integration"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r test-docmosis [options]"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
}

function show_install_help() {
  echo -e "${BOLD}Samstraumr Install${RESET} - Initialize or update project configuration"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r install [options]"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
  echo "  -f, --force          Force overwrite of existing configuration files"
  echo "  -v, --verbose        Display verbose output during configuration"
}

function show_hooks_help() {
  echo -e "${BOLD}Samstraumr Hooks${RESET} - Install or update git hooks for the repository"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r hooks [options]"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help           Display this help message"
  echo "  -f, --force          Force overwrite of existing hooks"
  echo "  -v, --verbose        Display verbose output during installation"
  echo "  --list               List available hooks without installing"
}

function show_demo_help() {
  echo -e "${BOLD}Samstraumr Demo${RESET} - Run demonstration scripts"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  ./s8r demo [demo-name]"
  echo
  echo -e "${BOLD}DEMO SCRIPTS:${RESET}"
  echo "  identity             Run tube identity demonstration"
  echo "  list                 List all available demos"
}

# Check requirements
check_requirements "java" "mvn" "git"

# Main entry point: Parse arguments and execute command
parse_global_args "$@"

# Exit with the status of the last command
exit $?