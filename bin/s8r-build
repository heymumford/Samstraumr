#!/usr/bin/env bash
#==============================================================================
# Filename: s8r-build
# Description: Unified build tool for Samstraumr framework
#
# Provides a streamlined interface for building the project with different
# modes, options for parallel execution, and support for quality checks.
#==============================================================================

# Determine script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}"

# Source unified common library if available, otherwise use original
if [ -f "${PROJECT_ROOT}/util/lib/unified-common.sh" ]; then
  source "${PROJECT_ROOT}/util/lib/unified-common.sh"
elif [ -f "${PROJECT_ROOT}/.s8r/lib/common.sh" ]; then
  source "${PROJECT_ROOT}/.s8r/lib/common.sh"
else
  # Fallback to minimal functionality if no libraries are found
  # Terminal colors
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  YELLOW='\033[0;33m'
  BOLD='\033[1m'
  RESET='\033[0m'
  
  # Functions for prettier output
  print_info() { echo -e "${BLUE}→ $1${RESET}"; }
  print_success() { echo -e "${GREEN}✓ $1${RESET}"; }
  print_error() { echo -e "${RED}✗ $1${RESET}" >&2; exit 1; }
  print_warning() { echo -e "${YELLOW}! $1${RESET}" >&2; }
  print_debug() { [[ "$VERBOSE" == "true" ]] && echo -e "DEBUG: $1" >&2 || true; }
  print_header() { echo -e "${BLUE}${BOLD}$1${RESET}"; echo -e "${BLUE}${BOLD}$(printf '=%.0s' $(seq 1 ${#1}))${RESET}"; }
  print_section() { echo -e "${BLUE}$1${RESET}"; }
  
  # Set up Maven options
  setup_maven_opts() {
    MVN_OPTS=""
    if [ -n "$MAVEN_MEMORY_OPTS" ]; then
      MVN_OPTS="$MAVEN_MEMORY_OPTS"
    else
      MVN_OPTS="-Xmx1g"
    fi
    export MAVEN_OPTS="$MVN_OPTS"
  }
  
  # Execute with timing information
  time_exec() {
    local start_time=$(date +%s)
    "$@"
    local exit_code=$?
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    if [ $duration -gt 60 ]; then
      local minutes=$((duration / 60))
      local seconds=$((duration % 60))
      echo -e "${YELLOW}Execution time: ${minutes}m ${seconds}s${RESET}"
    else
      echo -e "${YELLOW}Execution time: ${duration}s${RESET}"
    fi
    
    return $exit_code
  }
fi

# Initialize variables
MODE="fast"
CLEAN=false
VERBOSE=false
SKIP_QUALITY=false
PARALLEL=false
RUN_CI=false

#------------------------------------------------------------------------------
# Functions
#------------------------------------------------------------------------------

# Parse command line arguments
function parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c|--clean)
        CLEAN=true
        shift
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -p|--parallel)
        PARALLEL=true
        shift
        ;;
      --skip-quality)
        SKIP_QUALITY=true
        shift
        ;;
      --ci)
        RUN_CI=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        # Check if the argument is a valid build mode
        if [[ "$1" == "fast" || "$1" == "test" || "$1" == "package" || "$1" == "install" || 
              "$1" == "compile" || "$1" == "full" || "$1" == "docs" || "$1" == "site" ]]; then
          MODE="$1"
        else
          print_error "Unknown argument: $1"
          show_help
          exit 1
        fi
        shift
        ;;
    esac
  done
}

# Display help information
function show_help() {
  print_header "Samstraumr Build Tool"
  echo
  print_section "Usage"
  echo "  ./s8r-build [options] [mode]"
  echo
  print_section "Options"
  echo "  -c, --clean             Clean before building"
  echo "  -v, --verbose           Enable verbose output"
  echo "  -p, --parallel          Build in parallel where possible"
  echo "  --skip-quality          Skip quality checks"
  echo "  --ci                    Run local CI checks after build"
  echo "  -h, --help              Show this help message"
  echo
  print_section "Modes"
  echo "  fast                    Fast build with tests and quality checks skipped (default)"
  echo "  test                    Build and run tests"
  echo "  package                 Create JAR package"
  echo "  install                 Install to local Maven repository"
  echo "  compile                 Compile only"
  echo "  full                    Full build including tests, quality checks, and site"
  echo "  docs                    Generate project documentation"
  echo "  site                    Generate Maven site"
  echo
  print_section "Examples"
  echo "  ./s8r-build                     # Fast build (skip tests and quality checks)"
  echo "  ./s8r-build test                # Build and run tests"
  echo "  ./s8r-build -c package          # Clean and package"
  echo "  ./s8r-build -p install          # Parallel build and install to local repo"
}

# Core build function
function run_build() {
  # Construct Maven command based on arguments
  local mvn_args=()
  
  # Add clean if requested
  if $CLEAN; then
    mvn_args+=("clean")
  fi
  
  # Add mode-specific goals and options
  case "$MODE" in
    fast)
      mvn_args+=("compile")
      mvn_args+=("-DskipTests")
      # Always skip quality checks in fast mode
      mvn_args+=("-Dskip.quality.checks=true")
      ;;
    compile)
      mvn_args+=("compile")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    test)
      mvn_args+=("test")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    package)
      mvn_args+=("package")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    install)
      mvn_args+=("install")
      if $SKIP_QUALITY; then
        mvn_args+=("-Dskip.quality.checks=true")
      fi
      ;;
    full)
      mvn_args+=("verify")
      # Site generation has issues, so we'll skip it for now
      ;;
    site)
      mvn_args+=("site:site")
      ;;
    docs)
      mvn_args+=("javadoc:javadoc")
      ;;
  esac
  
  # Add parallel flag if requested
  if $PARALLEL; then
    mvn_args+=("-T 1C") # Use 1 thread per core
    print_info "Parallel build enabled"
  fi
  
  # Add verbose flag if requested
  if $VERBOSE; then
    mvn_args+=("-e")
  else
    mvn_args+=("-q")
  fi
  
  # Display build information
  print_header "Building Samstraumr"
  print_info "Mode: $MODE"
  
  if $CLEAN; then
    print_info "Clean build enabled"
  fi
  
  if $SKIP_QUALITY; then
    print_info "Quality checks skipped"
  fi
  
  # Setup Maven environment
  setup_maven_opts
  
  # Execute Maven with appropriate arguments
  cd "$PROJECT_ROOT"
  print_debug "Running: mvn ${mvn_args[*]}"
  
  # Use time_exec for timing information
  if time_exec mvn "${mvn_args[@]}"; then
    print_success "Build completed successfully"
    
    # Run CI checks if requested
    if $RUN_CI; then
      if [ -f "${PROJECT_ROOT}/s8r-ci" ]; then
        print_info "Running local CI checks..."
        if time_exec "${PROJECT_ROOT}/s8r-ci" --workflow local-pipeline.yml; then
          print_success "Local CI checks passed"
        else
          print_warning "Local CI checks failed"
          # Don't fail the build, just warn
        fi
      else
        print_warning "s8r-ci script not found. Skipping CI checks."
      fi
    fi
    
    return 0
  else
    print_error "Build failed"
    return 1
  fi
}

# Main function to orchestrate execution
function main() {
  parse_args "$@"
  
  # Print a summary of what we're about to do
  if $VERBOSE; then
    print_debug "Build mode: $MODE"
    print_debug "Clean: $CLEAN"
    print_debug "Parallel: $PARALLEL"
    print_debug "Skip quality: $SKIP_QUALITY"
    print_debug "Run CI: $RUN_CI"
  fi
  
  # Run the build
  run_build
}

#------------------------------------------------------------------------------
# Main Execution
#------------------------------------------------------------------------------

# Check if help is requested with no arguments or explicit help flag
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

# Run main function with all arguments
main "$@"
exit $?