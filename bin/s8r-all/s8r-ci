#!/usr/bin/env bash
#==============================================================================
# s8r-ci: Local CI runner for Samstraumr using nektos/act
# Allows running GitHub Actions workflows locally for testing
#==============================================================================
set -e

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

# Functions for prettier output
info() { echo -e "${BLUE}$1${RESET}"; }
success() { echo -e "${GREEN}$1${RESET}"; }
error() { echo -e "${RED}Error: $1${RESET}" >&2; exit 1; }
warn() { echo -e "${YELLOW}Warning: $1${RESET}" >&2; }

# Check if file exists (helper function)
check_file_exists() {
  if [ ! -f "$1" ]; then
    return 1
  fi
  return 0
}

# Find repository root
PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel)}"

# Check if act is installed
if ! command -v act &> /dev/null; then
  error "act is not installed. Please install it from https://github.com/nektos/act"
fi

# Parse arguments
parse_args() {
  WORKFLOW="local-pipeline.yml"
  JOB=""
  DRY_RUN=false
  VERBOSE=false
  EVENT="push"
  ARCH_VERIFY=false
  S8R_VERIFY=false
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -w|--workflow)
        if [[ -n "$2" && "$2" != -* ]]; then
          WORKFLOW="$2"
          shift 2
        else
          error "Workflow file missing after -w/--workflow"
        fi
        ;;
      -j|--job)
        if [[ -n "$2" && "$2" != -* ]]; then
          JOB="$2"
          shift 2
        else
          error "Job ID missing after -j/--job"
        fi
        ;;
      -e|--event)
        if [[ -n "$2" && "$2" != -* ]]; then
          EVENT="$2"
          shift 2
        else
          error "Event type missing after -e/--event"
        fi
        ;;
      -d|--dry-run)
        DRY_RUN=true
        shift
        ;;
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      --arch|--architecture)
        ARCH_VERIFY=true
        shift
        ;;
      --s8r|--structure)
        S8R_VERIFY=true
        shift
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        error "Unknown argument: $1"
        ;;
    esac
  done
}

# Display help information
show_help() {
  echo -e "${BOLD}Samstraumr Local CI Runner${RESET}"
  echo
  echo "Usage: ./s8r-ci [options]"
  echo
  echo "Options:"
  echo "  -w, --workflow FILE      Workflow file to run (default: local-pipeline.yml)"
  echo "  -j, --job JOB_ID         Specific job to run (default: all jobs)"
  echo "  -e, --event EVENT        Event type to trigger (default: push)"
  echo "  -d, --dry-run            Show what would be run without actually running it"
  echo "  -v, --verbose            Enable verbose output"
  echo "  --arch, --architecture   Run architecture verification directly (without workflow)"
  echo "  --s8r, --structure       Run S8r structure verification directly (without workflow)"
  echo "  -h, --help               Show this help message"
  echo
  echo "Available Workflows:"
  echo "  local-pipeline.yml       Simplified pipeline for local testing (default)"
  echo "  samstraumr-pipeline.yml  Full GitHub Actions pipeline (requires Maven in container)"
  echo "  s8r-structure-pipeline.yml  S8r structure verification pipeline"
  echo
  echo "Examples:"
  echo "  ./s8r-ci                 # Run the default CI pipeline"
  echo "  ./s8r-ci -j basic-verification  # Run only the basic verification job"
  echo "  ./s8r-ci -w smoke-test.yml      # Run the smoke test workflow"
  echo "  ./s8r-ci -e pull_request        # Trigger as pull_request event"
  echo "  ./s8r-ci --s8r            # Run S8r structure verification directly"
  echo
  echo "Available workflows:"
  find "${PROJECT_ROOT}/.github/workflows" -name "*.yml" -type f | while read -r workflow; do
    echo "  - $(basename "$workflow")"
  done
}

# Run workflow with act
run_workflow() {
  # Prepare options
  local act_args=()

  # Add job filter if specified
  if [[ -n "$JOB" ]]; then
    act_args+=("-j" "$JOB")
  fi
  
  # Create event file if it doesn't exist
  local event_file="${PROJECT_ROOT}/${EVENT}"
  if [[ ! -f "$event_file" ]]; then
    echo "{}" > "$event_file"
  fi
  
  # Set event type
  act_args+=("-e" "$EVENT")
  
  # Add workflow file
  if [[ "$WORKFLOW" != *".yml" ]]; then
    WORKFLOW="${WORKFLOW}.yml"
  fi
  
  # Check if workflow file exists
  local workflow_path="${PROJECT_ROOT}/.github/workflows/${WORKFLOW}"
  if [[ ! -f "$workflow_path" ]]; then
    error "Workflow file not found: $workflow_path"
  fi
  
  act_args+=("-W" "${PROJECT_ROOT}/.github/workflows/${WORKFLOW}")
  
  # Add verbosity
  if $VERBOSE; then
    act_args+=("-v")
  fi
  
  # Dry run
  if $DRY_RUN; then
    act_args+=("-n")
  fi
  
  # Set platform
  act_args+=("--platform" "ubuntu-latest=catthehacker/ubuntu:act-latest")

  # Display run information
  info "Running local CI with the following configuration:"
  info "- Workflow: ${WORKFLOW}"
  info "- Event: ${EVENT}"
  if [[ -n "$JOB" ]]; then
    info "- Job: ${JOB}"
  else
    info "- Job: all jobs"
  fi
  if $DRY_RUN; then
    info "- Mode: DRY RUN (no actual execution)"
  fi
  echo
  
  # Configure JVM options for Java 21
  if command -v java -version 2>&1 | grep -q "version \"21"; then
    export JAVA_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED"
    export MAVEN_OPTS="$JAVA_OPTS"
  fi

  # Execute act with the prepared arguments
  info "Running: act ${act_args[*]}"
  echo "================================================================="
  cd "$PROJECT_ROOT"
  if act "${act_args[@]}"; then
    echo "================================================================="
    success "Local CI execution completed successfully!"
  else
    local exit_code=$?
    echo "================================================================="
    error "Local CI execution failed with exit code $exit_code"
  fi
}

# Run architecture verification directly
run_architecture_verification() {
  info "Running Clean Architecture verification..."
  
  ARCH_VERIFY_SCRIPT="${PROJECT_ROOT}/s8r-architecture-verify"
  
  if ! check_file_exists "$ARCH_VERIFY_SCRIPT"; then
    error "Architecture verification script not found at: $ARCH_VERIFY_SCRIPT"
  fi
  
  # Set up Java options for reflection if using Java 21
  if command -v java -version 2>&1 | grep -q "version \"21"; then
    export JAVA_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED"
    export MAVEN_OPTS="$JAVA_OPTS"
  fi
  
  # Run with appropriate verbosity
  if $VERBOSE; then
    "$ARCH_VERIFY_SCRIPT" --verbose
  else
    "$ARCH_VERIFY_SCRIPT"
  fi
  
  if [ $? -eq 0 ]; then
    success "Clean Architecture verification passed!"
    return 0
  else
    error "Clean Architecture verification failed!"
    return 1
  fi
}

# Run S8r structure verification directly
run_s8r_structure_verification() {
  info "Running S8r structure verification..."
  
  S8R_VERIFY_SCRIPT="${PROJECT_ROOT}/s8r-structure-verify"
  
  if ! check_file_exists "$S8R_VERIFY_SCRIPT"; then
    error "S8r structure verification script not found at: $S8R_VERIFY_SCRIPT"
  fi
  
  # Set up Java options for reflection if using Java 21
  if command -v java -version 2>&1 | grep -q "version \"21"; then
    export JAVA_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED"
    export MAVEN_OPTS="$JAVA_OPTS"
  fi
  
  # Run with appropriate verbosity
  if $VERBOSE; then
    "$S8R_VERIFY_SCRIPT" --verbose
  else
    "$S8R_VERIFY_SCRIPT"
  fi
  
  if [ $? -eq 0 ]; then
    success "S8r structure verification passed!"
    return 0
  else
    error "S8r structure verification failed!"
    return 1
  fi
}

# Main execution
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  exit 0
fi

parse_args "$@"

# Run the appropriate verification or workflow
if $ARCH_VERIFY; then
  run_architecture_verification
elif $S8R_VERIFY; then
  run_s8r_structure_verification
else
  # Otherwise run the CI workflow
  run_workflow
fi