#!/usr/bin/env bash
#==============================================================================
# s8r-structure-verify: Verification tool for S8r CLI structure
# Tests and validates S8r CLI scripts, their integration, and compatibility
#==============================================================================
set -e

# Find repository root
PROJECT_ROOT="${PROJECT_ROOT:-$(git rev-parse --show-toplevel)}"

# Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
BOLD='\033[1m'
RESET='\033[0m'

# Functions for prettier output
info() { echo -e "${BLUE}$1${RESET}"; }
success() { echo -e "${GREEN}$1${RESET}"; }
error() { echo -e "${RED}Error: $1${RESET}" >&2; exit 1; }
warn() { echo -e "${YELLOW}Warning: $1${RESET}" >&2; }

# Default configuration
VERBOSE=false
QUICK=false
OUTPUT_FILE=""
REPORT_DIR="reports"
REPORT_FILE="s8r-structure-report.md"

# Parse arguments
parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -v|--verbose)
        VERBOSE=true
        shift
        ;;
      -q|--quick)
        QUICK=true
        shift
        ;;
      -o|--output)
        if [[ -n "$2" && "$2" != -* ]]; then
          OUTPUT_FILE="$2"
          shift 2
        else
          error "Output file path missing after -o/--output"
        fi
        ;;
      -h|--help)
        show_help
        exit 0
        ;;
      *)
        error "Unknown argument: $1"
        ;;
    esac
  done
}

# Display help information
show_help() {
  echo -e "${BOLD}S8r Structure Verification Tool${RESET}"
  echo
  echo "Usage: ./s8r-structure-verify [options]"
  echo
  echo "Options:"
  echo "  -v, --verbose           Enable verbose output"
  echo "  -q, --quick             Run a quick verification (skip extensive tests)"
  echo "  -o, --output FILE       Write report to specified file"
  echo "  -h, --help              Show this help message"
  echo
  echo "Examples:"
  echo "  ./s8r-structure-verify                # Run standard verification"
  echo "  ./s8r-structure-verify --quick        # Run quick verification"
  echo "  ./s8r-structure-verify -o s8r-report.md  # Save report to file"
}

# Main verification function
verify_s8r_structure() {
  info "Starting S8r structure verification..."
  
  # Create report directory if needed
  if [[ -n "$OUTPUT_FILE" ]]; then
    mkdir -p "$(dirname "$OUTPUT_FILE")"
  else
    mkdir -p "$REPORT_DIR"
    OUTPUT_FILE="$REPORT_DIR/$REPORT_FILE"
  fi
  
  # Initialize the report
  cat > "$OUTPUT_FILE" << EOF
# S8r Structure Verification Report

Generated: $(date)

## Overview

EOF
  
  # 1. Verify essential S8r scripts exist
  verify_essential_scripts
  
  # 2. Check script permissions
  verify_script_permissions
  
  # 3. Verify version consistency
  verify_version_consistency
  
  # 4. Test script functionality
  if ! $QUICK; then
    test_script_functionality
  else
    echo "## Script Functionality Tests" >> "$OUTPUT_FILE"
    echo "Quick mode enabled - skipping detailed functionality tests." >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE"
  fi
  
  # 5. Verify Maven structure integration
  verify_maven_integration
  
  # 6. Generate summary
  generate_summary
  
  success "S8r structure verification completed! Report saved to: $OUTPUT_FILE"
}

# Verify that essential S8r scripts exist
verify_essential_scripts() {
  info "Verifying essential S8r scripts..."
  
  # Define essential scripts - these MUST exist
  ESSENTIAL_SCRIPTS=(
    "s8r-test"
    "s8r-build"
    "s8r-version"
    "s8r-ci"
    "s8r-architecture-verify"
  )
  
  # Define recommended scripts - these SHOULD exist
  RECOMMENDED_SCRIPTS=(
    "s8r-help"
    "s8r-init"
    "s8r-machine"
    "s8r-component"
    "s8r-composite"
    "s8r-quality"
    "s8r-docs"
  )
  
  # Start the report section
  cat >> "$OUTPUT_FILE" << EOF
## Essential Scripts

| Script | Status | Executable |
|--------|--------|------------|
EOF
  
  # Check for all essential scripts
  MISSING_SCRIPTS=()
  for script in "${ESSENTIAL_SCRIPTS[@]}"; do
    if [ -f "$PROJECT_ROOT/$script" ]; then
      IS_EXECUTABLE="✅"
      if [ ! -x "$PROJECT_ROOT/$script" ]; then
        IS_EXECUTABLE="❌"
      fi
      echo "✓ $script exists"
      echo "| \`$script\` | ✅ | $IS_EXECUTABLE |" >> "$OUTPUT_FILE"
    else
      MISSING_SCRIPTS+=("$script")
      echo "✗ $script missing"
      echo "| \`$script\` | ❌ | N/A |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Add section for recommended scripts
  cat >> "$OUTPUT_FILE" << EOF

## Recommended Scripts

| Script | Status | Executable |
|--------|--------|------------|
EOF
  
  # Check for all recommended scripts
  MISSING_RECOMMENDED=()
  for script in "${RECOMMENDED_SCRIPTS[@]}"; do
    if [ -f "$PROJECT_ROOT/$script" ]; then
      IS_EXECUTABLE="✅"
      if [ ! -x "$PROJECT_ROOT/$script" ]; then
        IS_EXECUTABLE="❌"
      fi
      echo "✓ $script exists"
      echo "| \`$script\` | ✅ | $IS_EXECUTABLE |" >> "$OUTPUT_FILE"
    else
      MISSING_RECOMMENDED+=("$script")
      echo "? $script missing (recommended)"
      echo "| \`$script\` | ❌ | N/A |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Report missing scripts
  if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
    warn "Missing essential S8r scripts: ${MISSING_SCRIPTS[*]}"
    cat >> "$OUTPUT_FILE" << EOF

⚠️ **WARNING**: The following essential scripts are missing: ${MISSING_SCRIPTS[*]}
EOF
  fi
  
  # Report missing recommended scripts
  if [ ${#MISSING_RECOMMENDED[@]} -gt 0 ]; then
    info "Missing recommended S8r scripts: ${MISSING_RECOMMENDED[*]}"
    cat >> "$OUTPUT_FILE" << EOF

**Note**: The following recommended scripts are missing: ${MISSING_RECOMMENDED[*]}
EOF
  fi
  
  echo "" >> "$OUTPUT_FILE"
}

# Verify script permissions
verify_script_permissions() {
  info "Verifying script permissions..."
  
  cat >> "$OUTPUT_FILE" << EOF
## Script Permissions

| Script | Executable |
|--------|------------|
EOF
  
  # Find all S8r scripts and check permissions
  NON_EXECUTABLE=()
  for script in $(find "$PROJECT_ROOT" -maxdepth 1 -name "s8r*" -type f); do
    script_name=$(basename "$script")
    if [ -x "$script" ]; then
      echo "✓ $script_name is executable"
      echo "| \`$script_name\` | ✅ |" >> "$OUTPUT_FILE"
    else
      NON_EXECUTABLE+=("$script_name")
      echo "✗ $script_name is not executable"
      echo "| \`$script_name\` | ❌ |" >> "$OUTPUT_FILE"
    fi
  done
  
  # Report non-executable scripts
  if [ ${#NON_EXECUTABLE[@]} -gt 0 ]; then
    warn "The following scripts are not executable: ${NON_EXECUTABLE[*]}"
    cat >> "$OUTPUT_FILE" << EOF

⚠️ **WARNING**: The following scripts need to be made executable with \`chmod +x\`: ${NON_EXECUTABLE[*]}
EOF
    
    # Offer to fix permissions
    if [ -t 1 ]; then  # Only if running in an interactive terminal
      read -p "Fix permissions now? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        for script in "${NON_EXECUTABLE[@]}"; do
          chmod +x "$PROJECT_ROOT/$script"
          echo "Fixed permissions for $script"
        done
      fi
    fi
  fi
  
  echo "" >> "$OUTPUT_FILE"
}

# Verify version consistency
verify_version_consistency() {
  info "Verifying version consistency..."
  
  cat >> "$OUTPUT_FILE" << EOF
## Version Consistency

EOF
  
  # Check if s8r-version exists
  if [ ! -f "$PROJECT_ROOT/s8r-version" ]; then
    echo "s8r-version script not found, skipping version consistency check" >> "$OUTPUT_FILE"
    return
  fi
  
  # Get version from s8r-version
  S8R_VERSION=$("$PROJECT_ROOT/s8r-version" get 2>/dev/null | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown")
  
  # Check version in version.properties
  PROPERTIES_VERSION=""
  if [ -f "$PROJECT_ROOT/modules/version.properties" ]; then
    PROPERTIES_VERSION=$(grep "samstraumr.version=" "$PROJECT_ROOT/modules/version.properties" | cut -d= -f2 | tr -d ' \t\n\r')
  fi
  
  # Check version in pom.xml
  POM_VERSION=""
  if [ -f "$PROJECT_ROOT/pom.xml" ]; then
    POM_VERSION=$(grep -o '<version>[0-9]\+\.[0-9]\+\.[0-9]\+</version>' "$PROJECT_ROOT/pom.xml" | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
  fi
  
  # Report versions
  cat >> "$OUTPUT_FILE" << EOF
| Source | Version |
|--------|---------|
| s8r-version | $S8R_VERSION |
| version.properties | $PROPERTIES_VERSION |
| pom.xml | $POM_VERSION |

EOF
  
  # Check consistency
  if [ "$S8R_VERSION" != "unknown" ] && [ -n "$PROPERTIES_VERSION" ] && [ "$S8R_VERSION" != "$PROPERTIES_VERSION" ]; then
    warn "Version mismatch between s8r-version ($S8R_VERSION) and version.properties ($PROPERTIES_VERSION)"
    cat >> "$OUTPUT_FILE" << EOF
⚠️ **WARNING**: Version mismatch between s8r-version and version.properties
EOF
  elif [ "$S8R_VERSION" != "unknown" ] && [ -n "$POM_VERSION" ] && [ "$S8R_VERSION" != "$POM_VERSION" ]; then
    warn "Version mismatch between s8r-version ($S8R_VERSION) and pom.xml ($POM_VERSION)"
    cat >> "$OUTPUT_FILE" << EOF
⚠️ **WARNING**: Version mismatch between s8r-version and pom.xml
EOF
  elif [ -n "$PROPERTIES_VERSION" ] && [ -n "$POM_VERSION" ] && [ "$PROPERTIES_VERSION" != "$POM_VERSION" ]; then
    warn "Version mismatch between version.properties ($PROPERTIES_VERSION) and pom.xml ($POM_VERSION)"
    cat >> "$OUTPUT_FILE" << EOF
⚠️ **WARNING**: Version mismatch between version.properties and pom.xml
EOF
  else
    if [ "$S8R_VERSION" != "unknown" ]; then
      success "Version consistency check passed: $S8R_VERSION"
      cat >> "$OUTPUT_FILE" << EOF
✅ **SUCCESS**: Version consistency check passed: $S8R_VERSION
EOF
    fi
  fi
  
  echo "" >> "$OUTPUT_FILE"
}

# Test script functionality (basic tests)
test_script_functionality() {
  info "Testing script functionality..."
  
  cat >> "$OUTPUT_FILE" << EOF
## Script Functionality Tests

EOF
  
  # Test s8r-version functionality
  if [ -f "$PROJECT_ROOT/s8r-version" ]; then
    echo "Testing s8r-version..."
    if VERSION_OUTPUT=$("$PROJECT_ROOT/s8r-version" get 2>&1); then
      echo "✓ s8r-version get command works"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-version
✅ s8r-version get command works
\`\`\`
$VERSION_OUTPUT
\`\`\`

EOF
    else
      echo "✗ s8r-version get command failed"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-version
❌ s8r-version get command failed
\`\`\`
$VERSION_OUTPUT
\`\`\`

EOF
    fi
  fi
  
  # Test s8r-build help
  if [ -f "$PROJECT_ROOT/s8r-build" ]; then
    echo "Testing s8r-build help..."
    if BUILD_OUTPUT=$("$PROJECT_ROOT/s8r-build" --help 2>&1); then
      echo "✓ s8r-build help command works"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-build
✅ s8r-build help command works

EOF
    else
      echo "✗ s8r-build help command failed"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-build
❌ s8r-build help command failed
\`\`\`
$BUILD_OUTPUT
\`\`\`

EOF
    fi
  fi
  
  # Test s8r-test help
  if [ -f "$PROJECT_ROOT/s8r-test" ]; then
    echo "Testing s8r-test help..."
    if TEST_OUTPUT=$("$PROJECT_ROOT/s8r-test" --help 2>&1); then
      echo "✓ s8r-test help command works"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-test
✅ s8r-test help command works

EOF
    else
      echo "✗ s8r-test help command failed"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-test
❌ s8r-test help command failed
\`\`\`
$TEST_OUTPUT
\`\`\`

EOF
    fi
  fi
  
  # Test s8r-ci help
  if [ -f "$PROJECT_ROOT/s8r-ci" ]; then
    echo "Testing s8r-ci help..."
    if CI_OUTPUT=$("$PROJECT_ROOT/s8r-ci" --help 2>&1); then
      echo "✓ s8r-ci help command works"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-ci
✅ s8r-ci help command works

EOF
    else
      echo "✗ s8r-ci help command failed"
      cat >> "$OUTPUT_FILE" << EOF
### s8r-ci
❌ s8r-ci help command failed
\`\`\`
$CI_OUTPUT
\`\`\`

EOF
    fi
  fi
}

# Verify Maven structure integration
verify_maven_integration() {
  info "Verifying Maven structure integration..."
  
  cat >> "$OUTPUT_FILE" << EOF
## Maven Structure Integration

EOF
  
  # Check if Maven structure test exists
  if [ -f "$PROJECT_ROOT/test-maven-structure.sh" ]; then
    echo "Maven structure test script exists"
    cat >> "$OUTPUT_FILE" << EOF
✅ Maven structure test script exists: \`test-maven-structure.sh\`

EOF
    
    # Check if maven profile test exists
    if [ -f "$PROJECT_ROOT/maven-profile-test.sh" ]; then
      echo "Maven profile test script exists"
      cat >> "$OUTPUT_FILE" << EOF
✅ Maven profile test script exists: \`maven-profile-test.sh\`

EOF
    else
      echo "Maven profile test script missing"
      cat >> "$OUTPUT_FILE" << EOF
❌ Maven profile test script missing: \`maven-profile-test.sh\`

EOF
    fi
  else
    echo "Maven structure test script missing"
    cat >> "$OUTPUT_FILE" << EOF
❌ Maven structure test script missing: \`test-maven-structure.sh\`

EOF
  fi
  
  # Check Maven structure documentation
  if [ -f "$PROJECT_ROOT/docs/reference/maven-structure.md" ]; then
    echo "Maven structure documentation exists"
    cat >> "$OUTPUT_FILE" << EOF
✅ Maven structure documentation exists: \`docs/reference/maven-structure.md\`
EOF
  else
    echo "Maven structure documentation missing"
    cat >> "$OUTPUT_FILE" << EOF
❌ Maven structure documentation missing: \`docs/reference/maven-structure.md\`
EOF
  fi
  
  echo "" >> "$OUTPUT_FILE"
}

# Generate summary section
generate_summary() {
  info "Generating summary..."
  
  # Count existing S8r scripts
  S8R_SCRIPT_COUNT=$(find "$PROJECT_ROOT" -maxdepth 1 -name "s8r*" -type f | wc -l)
  
  # Calculate non-executable percentage
  NON_EXECUTABLE_COUNT=$(find "$PROJECT_ROOT" -maxdepth 1 -name "s8r*" -type f ! -executable | wc -l)
  if [ "$S8R_SCRIPT_COUNT" -gt 0 ]; then
    NON_EXECUTABLE_PERCENTAGE=$((NON_EXECUTABLE_COUNT * 100 / S8R_SCRIPT_COUNT))
  else
    NON_EXECUTABLE_PERCENTAGE=0
  fi
  
  # Move summary to the top of the report
  TMP_REPORT=$(mktemp)
  cat "$OUTPUT_FILE" > "$TMP_REPORT"
  
  cat > "$OUTPUT_FILE" << EOF
# S8r Structure Verification Report

Generated: $(date)

## Summary

- **Total S8r scripts**: $S8R_SCRIPT_COUNT
- **Non-executable scripts**: $NON_EXECUTABLE_COUNT ($NON_EXECUTABLE_PERCENTAGE%)
- **S8r version**: $S8R_VERSION
EOF
  
  # Add missing scripts summary if any
  if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
    cat >> "$OUTPUT_FILE" << EOF
- **Missing essential scripts**: ${MISSING_SCRIPTS[*]}
EOF
  else
    cat >> "$OUTPUT_FILE" << EOF
- **Essential scripts**: All present ✅
EOF
  fi
  
  # Add overall status
  if [ ${#MISSING_SCRIPTS[@]} -eq 0 ] && [ "$NON_EXECUTABLE_COUNT" -eq 0 ]; then
    cat >> "$OUTPUT_FILE" << EOF
- **Overall status**: PASS ✅
EOF
  else
    cat >> "$OUTPUT_FILE" << EOF
- **Overall status**: NEEDS ATTENTION ⚠️
EOF
  fi
  
  # Append the rest of the report
  cat "$TMP_REPORT" | tail -n +4 >> "$OUTPUT_FILE"
  rm "$TMP_REPORT"
}

# Main execution
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    exit 0
  fi
fi

parse_args "$@"
cd "$PROJECT_ROOT"
verify_s8r_structure