#!/usr/bin/env bash
#==============================================================================
# s8r-version-robust: Precise version management for Samstraumr
# A consolidated, self-monitoring version update system with precise version
# tracking and enhanced error detection/recovery
#==============================================================================

# Strict error handling
set -o pipefail

# Configuration - version file paths and patterns
VERSION_FILE="${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/Samstraumr/version.properties"
VERSION_PATTERN='[0-9]+\.[0-9]+\.[0-9]+'

# Known files that should contain version information
declare -A VERSION_LOCATIONS=(
  ["$VERSION_FILE"]="samstraumr.version="
  ["${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/pom.xml"]="<version>VERSION</version>\|<samstraumr.version>VERSION</samstraumr.version>"
  ["${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/Samstraumr/pom.xml"]="<version>VERSION</version>\|<samstraumr.version>VERSION</samstraumr.version>"
  ["${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/Samstraumr/samstraumr-core/pom.xml"]="<version>VERSION</version>\|<samstraumr.version>VERSION</samstraumr.version>"
  ["${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/README.md"]="version-VERSION-blue\|<version>VERSION</version>"
  ["${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/CLAUDE.md"]="version of Samstraumr is: VERSION"
)

# Validation flag
VALIDATION_FAILED=0

# Logging functions - simple, no colors
log_info() { echo "[INFO] $1"; }
log_success() { echo "[SUCCESS] $1"; }
log_warning() { echo "[WARNING] $1" >&2; }
log_error() { echo "[ERROR] $1" >&2; }
log_detail() { echo "         $1"; }

# Exit with error message and status code
fail() {
  log_error "$1"
  exit "${2:-1}"
}

# Self-monitoring check: Verify script is properly installed
check_installation() {
  # Check if running from correct location
  local script_path="$(realpath "$0")"
  local expected_dir="${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}"
  
  if [[ ! "$script_path" == "$expected_dir"/* ]]; then
    log_warning "Script not running from expected project directory"
    log_warning "Found: $script_path"
    log_warning "Expected: $expected_dir/s8r-version-robust"
    # Continue anyway - this might be a copy or symlink
  fi
  
  # Check for required files
  if [[ ! -f "$VERSION_FILE" ]]; then
    log_error "Version properties file not found: $VERSION_FILE"
    log_info "Attempting to recover by searching for version.properties..."
    
    # Attempt recovery by searching for version.properties
    local found_version_file=$(find "${PROJECT_ROOT:-$(pwd)}" -name "version.properties" -type f | head -n 1)
    
    if [[ -n "$found_version_file" ]]; then
      VERSION_FILE="$found_version_file"
      log_success "Found alternative version file: $VERSION_FILE"
      VERSION_LOCATIONS["$VERSION_FILE"]="samstraumr.version="
    else
      fail "Could not locate version.properties file in project. Please verify project structure."
    fi
  fi
}

# Get current version from source of truth
get_version() {
  if [[ ! -f "$VERSION_FILE" ]]; then
    fail "Version file not found: $VERSION_FILE" 2
  fi
  
  local version=$(grep "samstraumr.version=" "$VERSION_FILE" | cut -d= -f2)
  
  if [[ -z "$version" ]]; then
    log_error "Failed to extract version from $VERSION_FILE"
    log_info "Attempting to recover by searching file content..."
    
    # Attempt recovery by searching for version pattern
    version=$(grep -o "$VERSION_PATTERN" "$VERSION_FILE" | head -n 1)
    
    if [[ -z "$version" ]]; then
      fail "Could not extract version information from $VERSION_FILE" 3
    else
      log_success "Recovered version: $version"
    fi
  fi
  
  # Validate version format
  if ! [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    fail "Invalid version format: $version (must be in format x.y.z)" 4
  fi
  
  echo "$version"
}

# Check for version inconsistencies across files
check_version_consistency() {
  local reference_version="$1"
  local inconsistencies=0
  local absent_files=0
  
  log_info "Checking version consistency across all known files..."
  
  for file in "${!VERSION_LOCATIONS[@]}"; do
    if [[ ! -f "$file" ]]; then
      log_warning "Version file not found: $file"
      ((absent_files++))
      continue
    fi
    
    local pattern="${VERSION_LOCATIONS[$file]}"
    # Replace VERSION placeholder with actual version for search
    pattern="${pattern//VERSION/$reference_version}"
    
    if ! grep -q "$pattern" "$file"; then
      log_warning "Version inconsistency in $file"
      log_detail "Expected to find: $pattern"
      ((inconsistencies++))
    fi
  done
  
  # Return results
  if [[ $inconsistencies -gt 0 || $absent_files -gt 0 ]]; then
    log_warning "Found $inconsistencies inconsistencies and $absent_files missing files"
    return 1
  else
    log_success "All files contain consistent version information"
    return 0
  fi
}

# Update a specific file with new version
update_file_version() {
  local file="$1"
  local old_version="$2"
  local new_version="$3"
  local pattern="${VERSION_LOCATIONS[$file]}"
  local updated=0
  
  # Skip if file doesn't exist
  if [[ ! -f "$file" ]]; then
    log_warning "Cannot update $file: File not found"
    return 1
  fi
  
  # Make backup of file
  cp "$file" "${file}.bak"
  
  # Handle special cases by file type
  if [[ "$file" == *"version.properties" ]]; then
    # Update version property
    sed -i "s/^samstraumr.version=.*/samstraumr.version=$new_version/" "$file"
    
    # Update last updated date
    sed -i "s/^samstraumr.last.updated=.*/samstraumr.last.updated=$(date +'%B %d, %Y')/" "$file"
    
    updated=1
  elif [[ "$file" == *"pom.xml" ]]; then
    # Update project version
    if grep -q "<version>[0-9].*</version>" "$file"; then
      sed -i "s|<version>[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*</version>|<version>$new_version</version>|g" "$file"
      updated=1
    fi
    
    # Update samstraumr.version property
    if grep -q "<samstraumr.version>" "$file"; then
      sed -i "s|<samstraumr.version>[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*</samstraumr.version>|<samstraumr.version>$new_version</samstraumr.version>|g" "$file"
      updated=1
    fi
    
    # Update parent version
    if grep -q "<parent>" "$file"; then
      sed -i "/<parent>/,/<\/parent>/s|<version>[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*</version>|<version>$new_version</version>|g" "$file"
      updated=1
    fi
  elif [[ "$file" == *"README.md" ]]; then
    # Update badge
    if grep -q "version-.*-blue" "$file"; then
      sed -i "s|version-[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*-blue|version-$new_version-blue|g" "$file"
      updated=1
    fi
    
    # Update dependency example
    if grep -q "<version>[0-9]" "$file"; then
      sed -i "s|<version>[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*</version>|<version>$new_version</version>|g" "$file"
      updated=1
    fi
  elif [[ "$file" == *"CLAUDE.md" ]]; then
    # Match specific pattern to avoid unwanted replacements
    if grep -q "version of Samstraumr is: " "$file"; then
      sed -i "s|version of Samstraumr is: [0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*|version of Samstraumr is: $new_version|g" "$file"
      updated=1
    fi
  fi
  
  # Verify update was successful
  if grep -q "${pattern//VERSION/$new_version}" "$file"; then
    log_success "Updated $file"
    # Remove backup if successful
    rm "${file}.bak"
    return 0
  else
    log_error "Failed to update $file correctly"
    log_info "Restoring backup..."
    
    # Restore from backup
    mv "${file}.bak" "$file"
    VALIDATION_FAILED=1
    return 1
  fi
}

# Handles changelog updates for new versions
update_changelog() {
  local old_version="$1"
  local new_version="$2"
  local today="$(date +"%Y-%m-%d")"
  local changelog="${PROJECT_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}/docs/reference/release/changelog.md"
  
  # Skip if changelog doesn't exist
  if [[ ! -f "$changelog" ]]; then
    log_warning "Changelog not found: $changelog"
    return 1
  fi
  
  # Generate new entry template
  local template=$(cat <<EOF
## [$new_version] - $today

### Added

- 

### Changed

- 

### Fixed

- 

EOF
)
  
  # Find header line to insert after
  local header_line=$(grep -n "All notable changes to this project will be documented in this file." "$changelog" | cut -d: -f1)
  
  if [[ -n "$header_line" ]]; then
    # Skip to blank line after header
    header_line=$((header_line + 2))
    
    # Create backup
    cp "$changelog" "${changelog}.bak"
    
    # Create temporary file with new content
    { head -n $header_line "$changelog"; echo -e "$template"; tail -n +$((header_line+1)) "$changelog"; } > "${changelog}.new"
    
    if [[ $? -eq 0 ]]; then
      mv "${changelog}.new" "$changelog"
      log_success "Updated changelog.md with new version entry"
      rm "${changelog}.bak"
      return 0
    else
      log_error "Failed to update changelog"
      log_info "Restoring from backup..."
      mv "${changelog}.bak" "$changelog"
      return 1
    fi
  else
    log_warning "Could not locate changelog header line"
    log_detail "Header pattern 'All notable changes...' not found"
    return 1
  fi
}

# Main function to update all version references
update_version() {
  local old_version="$1"
  local new_version="$2"
  local files_updated=0
  local files_failed=0
  
  # Validate version format
  if ! [[ "$new_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    fail "Invalid version format: $new_version (must be in format x.y.z)" 4
  fi
  
  log_info "Updating version from $old_version to $new_version"
  
  # First, update version properties file (source of truth)
  update_file_version "$VERSION_FILE" "$old_version" "$new_version"
  local result=$?
  
  if [[ $result -ne 0 ]]; then
    fail "Failed to update primary version file. Aborting." 5
  fi
  
  # Then update all other known files
  for file in "${!VERSION_LOCATIONS[@]}"; do
    # Skip version.properties as it's already done
    if [[ "$file" == "$VERSION_FILE" ]]; then
      continue
    fi
    
    update_file_version "$file" "$old_version" "$new_version"
    result=$?
    
    if [[ $result -eq 0 ]]; then
      ((files_updated++))
    else
      ((files_failed++))
    fi
  done
  
  # Update changelog
  update_changelog "$old_version" "$new_version"
  
  # Verify consistency
  log_info "Verifying version consistency after update..."
  check_version_consistency "$new_version"
  local consistency_check=$?
  
  # Report results
  if [[ $VALIDATION_FAILED -eq 0 && $consistency_check -eq 0 ]]; then
    log_success "Version successfully updated from $old_version to $new_version"
    log_detail "Updated $((files_updated + 1)) files successfully"
    return 0
  else
    log_warning "Version update completed with warnings"
    log_detail "Successfully updated: $((files_updated + 1)) files"
    
    if [[ $files_failed -gt 0 ]]; then
      log_detail "Failed to update: $files_failed files"
    fi
    
    if [[ $consistency_check -ne 0 ]]; then
      log_detail "Some files may still have inconsistent version information"
      log_detail "Run '$0 verify' to check all files or '$0 fix' to attempt repair"
    fi
    
    return 1
  fi
}

# Verify version consistency across all files
verify_version() {
  local current=$(get_version)
  
  log_info "Current version: $current"
  check_version_consistency "$current"
  
  local result=$?
  if [[ $result -ne 0 ]]; then
    log_info "To fix inconsistencies, run: $0 fix"
    return 1
  fi
  return 0
}

# Command line parsing
command="$1"
shift || true

# Initial self-check
check_installation

case "$command" in
  get)
    # Get current version
    current=$(get_version)
    log_info "Samstraumr Version: $current"
    # Optional verification
    if [[ "$1" == "--verify" ]]; then
      verify_version
    fi
    ;;
    
  bump)
    # Bump version
    type="${1:-patch}"
    current=$(get_version)
    
    # Parse version components
    IFS='.' read -r major minor patch <<< "$current"
    
    # Calculate new version
    case "$type" in
      major) new="$((major+1)).0.0" ;;
      minor) new="${major}.$((minor+1)).0" ;;
      patch) new="${major}.${minor}.$((patch+1))" ;;
      *)     fail "Invalid bump type: $type (use major, minor, or patch)" 6 ;;
    esac
    
    update_version "$current" "$new"
    ;;
    
  set)
    # Set version to specific value
    new="$1"
    if [[ -z "$new" ]]; then
      fail "Version must be specified (format: x.y.z)" 7
    fi
    
    current=$(get_version)
    update_version "$current" "$new"
    ;;
  
  fix)
    # Fix version inconsistencies
    current=$(get_version)
    log_info "Fixing version inconsistencies - forcing all files to use $current"
    update_version "$current" "$current"
    ;;
    
  verify)
    # Verify version consistency
    verify_version
    exit $?
    ;;
    
  *)
    # Help message
    echo "Samstraumr Version Manager"
    echo
    echo "Usage: $0 <command> [options]"
    echo
    echo "Commands:"
    echo "  get [--verify]      Show current version (--verify also checks consistency)"
    echo "  bump [type]         Bump version (type: major, minor, patch)"
    echo "  set <version>       Set specific version (format: x.y.z)"
    echo "  fix                 Fix version inconsistencies across files"
    echo "  verify              Verify version consistency across all files"
    echo
    echo "Examples:"
    echo "  $0 get              Show current version"
    echo "  $0 bump patch       Increment patch version"
    echo "  $0 bump minor       Increment minor version"
    echo "  $0 set 2.0.0        Set version to 2.0.0"
    echo "  $0 verify           Check for version inconsistencies"
    exit 1
    ;;
esac