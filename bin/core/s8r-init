#!/usr/bin/env bash
#==============================================================================
# s8r-init: Initialize a new S8r model repository
# Part of the Samstraumr project CLI tools
#==============================================================================
set -e

# Determine script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export PROJECT_ROOT="${SCRIPT_DIR}"

# Source common library
source "${PROJECT_ROOT}/.s8r/lib/common.sh"

# Initialize variables
VERBOSE=false
PACKAGE="org.example"
MODEL_NAME=""
DEBUG=false
TARGET_DIR="$(pwd)"

# Display help information
show_help() {
  echo -e "${BOLD}S8r Init${RESET} - Initialize a new S8r model repository"
  echo
  echo -e "${BOLD}USAGE:${RESET}"
  echo "  s8r init [options] [target-directory]"
  echo
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo "  -h, --help                Display this help message"
  echo "  -v, --verbose             Enable verbose output"
  echo "  -p, --package <name>      Specify a custom package name (default: org.example)"
  echo "  -n, --name <name>         Specify a model name"
  echo "  -d, --debug               Enable debug output (additional details)"
  echo
  echo -e "${BOLD}ARGUMENTS:${RESET}"
  echo "  target-directory          Directory to initialize (default: current directory)"
  echo
  echo -e "${BOLD}EXAMPLES:${RESET}"
  echo "  s8r init                                  # Initialize in current directory"
  echo "  s8r init ~/new-model                      # Initialize in ~/new-model"
  echo "  s8r init -p com.example.model             # Use custom package name"
  echo "  s8r init -n \"Customer Data Model\" -p com.example.customer  # Set model name and package"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -p|--package)
      if [[ -z "$2" || "$2" == -* ]]; then
        error "Package name argument missing"
      fi
      PACKAGE="$2"
      shift 2
      ;;
    -n|--name)
      if [[ -z "$2" || "$2" == -* ]]; then
        error "Model name argument missing"
      fi
      MODEL_NAME="$2"
      shift 2
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    *)
      if [[ -z "$TARGET_DIR" || "$TARGET_DIR" == "$(pwd)" ]]; then
        TARGET_DIR="$1"
      else
        error "Unexpected argument: $1"
      fi
      shift
      ;;
  esac
done

# Function to run Java-based initializer
run_initializer() {
  local target_dir="$1"
  local package_name="$2"
  local model_name="$3"
  
  # Check if Maven is available
  if ! command_exists "mvn"; then
    error "Maven is required for initialization. Please install Maven and try again."
  fi
  
  # Generate temporary classpath file
  local classpath_file="/tmp/s8r-init-classpath-$$.txt"
  
  # Load classpath for InitProjectCommand
  if $VERBOSE; then
    info "Resolving classpath for initializer..."
  fi
  
  cd "${PROJECT_ROOT}"
  mvn -q dependency:build-classpath -Dmdep.outputFile="$classpath_file" -DincludeTypes=jar
  
  if [ ! -f "$classpath_file" ]; then
    error "Failed to generate classpath for initializer"
  fi
  
  # Read classpath from file
  CLASSPATH="$(<"$classpath_file"):${PROJECT_ROOT}/modules/samstraumr-core/target/classes"
  
  # Clean up temporary file
  rm -f "$classpath_file"
  
  # Prepare command arguments
  local java_args=()
  
  # Enable debugging if requested
  if $DEBUG; then
    java_args+=("-Ddebug=true")
  fi
  
  # Add system properties for initialization
  java_args+=("-Ds8r.init.target=$target_dir")
  
  # Add model name if provided
  if [ -n "$model_name" ]; then
    java_args+=("-Ds8r.init.modelName=$model_name")
  fi
  
  # Run the initializer with package
  if $VERBOSE; then
    info "Running initializer with package $package_name..."
  fi
  
  # Run the command runner
  java -cp "$CLASSPATH" "${java_args[@]}" \
    org.s8r.adapter.in.cli.InitProjectCommand "$target_dir" "$package_name"
  
  success "S8r model initialized successfully at: $target_dir"
  
  # Print helpful next steps
  echo ""
  echo -e "${BOLD}Next steps:${RESET}"
  echo "  - Explore the generated model structure"
  echo "  - Create additional components with 's8r component create'"
  echo "  - Create machines with 's8r machine create'"
  echo "  - View your model with 's8r list'"
}

# Main execution
main() {
  # Ensure the target directory exists
  if [ ! -d "$TARGET_DIR" ]; then
    if $VERBOSE; then
      info "Creating target directory: $TARGET_DIR"
    fi
    mkdir -p "$TARGET_DIR"
  fi
  
  # Convert to absolute path
  TARGET_DIR="$(cd "$TARGET_DIR" && pwd)"
  
  if $VERBOSE; then
    info "Initializing S8r model in: $TARGET_DIR"
  fi
  
  # Check if target is already an S8r repository
  if [ -d "$TARGET_DIR/.s8r" ]; then
    error "Target directory already contains an S8r model"
  fi
  
  # Check if target is a git repository
  if [ ! -d "$TARGET_DIR/.git" ]; then
    info "Target is not a git repository. Initializing git..."
    
    # Initialize git repository
    (cd "$TARGET_DIR" && git init)
    
    # Create initial commit if there are no commits yet
    if ! (cd "$TARGET_DIR" && git rev-parse --verify HEAD >/dev/null 2>&1); then
      if $VERBOSE; then
        info "Creating initial git commit..."
      fi
      
      # Create dummy README for initial commit
      if [ ! -f "$TARGET_DIR/README.md" ]; then
        echo "# S8r Model" > "$TARGET_DIR/README.md"
        (cd "$TARGET_DIR" && git add README.md)
        (cd "$TARGET_DIR" && git commit -m "Initial commit")
      fi
    fi
  fi
  
  # Set default model name based on directory name if not provided
  if [ -z "$MODEL_NAME" ]; then
    MODEL_NAME="$(basename "$TARGET_DIR") Model"
  fi
  
  # Run the Java initializer
  if $VERBOSE; then
    info "Running S8r initializer..."
  fi
  
  run_initializer "$TARGET_DIR" "$PACKAGE" "$MODEL_NAME"
}

# Execute the main function
main