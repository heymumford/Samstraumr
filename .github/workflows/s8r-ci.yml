name: S8r CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      run_checks:
        description: 'Run all quality checks'
        type: boolean
        default: true
      run_tests:
        description: 'Run all tests'
        type: boolean
        default: true

# Environment variables used across jobs
env:
  JAVA_VERSION: '21'
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version'
  MAVEN_OPTS: '-Xmx3072m'

jobs:
  ###############################################
  # Basic verification - quick checks before running full tests
  ###############################################
  basic-verification:
    name: Basic Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Validate Maven structure
        run: bin/util/scripts/test/maven-structure-test.sh
      
      - name: Check circular dependencies
        run: bin/util/scripts/check-circular-dependencies.sh

      - name: Verify package structure
        run: bin/test/verify-test-suite --skip-tests --no-report
      
      - name: Verify project builds
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean compile

  ###############################################
  # Quality checks - static analysis, style checks, etc.
  ###############################################
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: basic-verification
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.run_checks)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Run checkstyle
        run: mvn ${{ env.MAVEN_CLI_OPTS }} checkstyle:check
      
      - name: Run PMD analysis
        run: mvn ${{ env.MAVEN_CLI_OPTS }} pmd:check
      
      - name: Run SpotBugs analysis
        run: mvn ${{ env.MAVEN_CLI_OPTS }} spotbugs:check
      
      - name: Run OWASP dependency check
        run: mvn ${{ env.MAVEN_CLI_OPTS }} org.owasp:dependency-check-maven:check

      - name: Verify TODO format
        run: bin/util/scripts/check-todo-format.sh
      
      - name: Check import organization
        run: bin/util/scripts/check-imports.sh
      
      - name: Verify architecture compliance
        run: bin/test/verify-test-suite --skip-tests --check-architecture-only --no-report

  ###############################################
  # Unit tests - fast, isolated tests
  ###############################################
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: basic-verification
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.run_tests)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Run unit tests
        run: bin/s8r-test unit --parallel
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/

  ###############################################
  # Component tests - component-level integration tests
  ###############################################
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.run_tests)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Run component tests
        run: bin/s8r-test component --parallel
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: component-test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/

  ###############################################
  # Composite tests - composite component tests
  ###############################################
  composite-tests:
    name: Composite Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.run_tests)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Run composite tests
        run: bin/s8r-test composite
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: composite-test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/

  ###############################################
  # Integration tests - system integration tests
  ###############################################
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [component-tests, composite-tests]
    if: success() && (github.event_name != 'workflow_dispatch' || inputs.run_tests)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Run integration tests
        run: bin/s8r-test integration
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            **/target/surefire-reports/
            **/target/site/jacoco/

  ###############################################
  # Coverage analysis - analyze and report coverage
  ###############################################
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, composite-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.component-tests.result == 'success' || needs.composite-tests.result == 'success' || needs.integration-tests.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Merge JaCoCo reports
        run: |
          mkdir -p target/site/jacoco-merged
          mvn ${{ env.MAVEN_CLI_OPTS }} jacoco:merge -Djacoco.fileSets.0.directory=artifacts/ -Djacoco.fileSets.0.includes=**/*.exec -Djacoco.destFile=target/jacoco-merged.exec
          mvn ${{ env.MAVEN_CLI_OPTS }} jacoco:report -Djacoco.dataFile=target/jacoco-merged.exec -Djacoco.outputDirectory=target/site/jacoco-merged
      
      - name: Run coverage analysis
        run: bin/test/analyze-test-coverage --report --threshold 80
      
      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            target/site/jacoco-merged/
            test-coverage-analysis.md

  ###############################################
  # Package and deploy - build and publish artifacts
  ###############################################
  package-deploy:
    name: Package and Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, integration-tests]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
          server-id: github
      
      - name: Build and package
        run: mvn ${{ env.MAVEN_CLI_OPTS }} clean package -DskipTests
      
      - name: Verify version consistency
        run: bin/s8r-version verify
      
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: s8r-artifacts
          path: |
            **/target/*.jar
            !**/target/original-*.jar

      # Deploy to GitHub Packages - would require additional setup
      # - name: Publish to GitHub Packages
      #   run: mvn ${{ env.MAVEN_CLI_OPTS }} deploy -DskipTests
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ###############################################
  # Documentation generation - build and publish docs
  ###############################################
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: package-deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Generate documentation
        run: bin/s8r-docs generate
      
      - name: Check for scientific documentation standards
        run: bin/release/prepare-release --skip-tests --skip-build --dry-run --verbose "$(bin/s8r-version get)"
      
      - name: Archive documentation
        uses: actions/upload-artifact@v3
        with:
          name: s8r-documentation
          path: site/

  ###############################################
  # Release notification - notify of successful build
  ###############################################
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [package-deploy, documentation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Prepare status message
        run: |
          if [ "${{ needs.package-deploy.result }}" == "success" ]; then
            echo "WORKFLOW_STATUS=✅ Build successful" >> $GITHUB_ENV
          else
            echo "WORKFLOW_STATUS=❌ Build failed" >> $GITHUB_ENV
          fi
          
          # Get version
          if [ -f "bin/s8r-version" ]; then
            echo "S8R_VERSION=$(bin/s8r-version get)" >> $GITHUB_ENV
          else
            echo "S8R_VERSION=unknown" >> $GITHUB_ENV
          fi
      
      # Example of sending notifications
      - name: Send notification message (simulation)
        run: |
          echo "Sending notification: ${{ env.WORKFLOW_STATUS }} for S8r ${{ env.S8R_VERSION }}"
          echo "Workflow build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"