name: Samstraumr Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Manual trigger

jobs:
  # Core initialization and build verification
  initialization:
    name: Initialization and Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for SonarQube analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Environment awareness
        run: |
          echo "Environment Information:"
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          java -version
          echo "Working directory: $(pwd)"
          ls -la

      - name: Initialize build environment
        run: |
          # Make sure util/test directory exists
          mkdir -p ./util/test

          # Check if run-tests.sh exists, if not, add a fallback version
          if [ ! -f ./util/test/run-tests.sh ]; then
            echo "Test runner script not found, creating fallback version"
            cat > ./util/test/run-tests.sh << 'EOF'
#!/bin/bash
# Fallback test runner
TEST_TYPE="${1:-all}"
SKIP_QUALITY=""
if [[ "$*" == *"--skip-quality"* ]]; then
  SKIP_QUALITY="-P skip-quality-checks -Dspotless.check.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Djacoco.skip=true"
fi

case $TEST_TYPE in
  critical|atl)
    mvn test $SKIP_QUALITY -P atl-tests
    ;;
  btl)
    mvn test $SKIP_QUALITY -P btl-tests
    ;;
  tube)
    mvn test $SKIP_QUALITY -Dtest=*TubeTest
    ;;
  flow)
    mvn test $SKIP_QUALITY -Dtest=*FlowTest
    ;;
  bundle)
    mvn test $SKIP_QUALITY -Dtest=*BundleTest
    ;;
  stream)
    mvn test $SKIP_QUALITY -Dtest=*StreamTest
    ;;
  adaptation)
    mvn test $SKIP_QUALITY -Dtest=*AdaptationTest
    ;;
  machine)
    mvn test $SKIP_QUALITY -Dcucumber.filter.tags="@L2_Machine"
    ;;
  acceptance)
    mvn test $SKIP_QUALITY -Dcucumber.filter.tags="@Acceptance"
    ;;
  all)
    mvn test $SKIP_QUALITY
    ;;
esac
EOF
          fi

          chmod +x ./util/test/run-tests.sh
          chmod +x ./util/build/build-performance.sh || echo "Warning: build-performance.sh not found"
          chmod +x ./util/build/build-optimal.sh || echo "Warning: build-optimal.sh not found"
          chmod +x ./util/quality/build-checks.sh || echo "Warning: build-checks.sh not found"

      - name: Verify compilation
        run: mvn -B clean compile

  # ATL Critical tests - must pass before any other tests run
  atl-tests:
    name: Above-The-Line Tests
    needs: initialization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Prepare test environment
        run: |
          chmod +x ./util/test/run-tests.sh
          chmod +x ./util/build/build-performance.sh || true
          chmod +x ./util/build/build-optimal.sh || true

      - name: Run ATL critical tests
        run: ./util/test/run-tests.sh atl --skip-quality

      - name: Upload ATL test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: atl-test-reports
          path: |
            **/target/surefire-reports/
            **/target/cucumber-reports/
          retention-days: 7

  # Unit and component tests
  tube-bundle-tests:
    name: Tube and Bundle Tests
    needs: atl-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Prepare test environment
        run: chmod +x ./util/test/run-tests.sh

      - name: Run Tube Tests
        run: ./util/test/run-tests.sh tube --skip-quality

      - name: Run Flow Tests
        run: ./util/test/run-tests.sh flow --skip-quality

      - name: Run Bundle Tests
        run: ./util/test/run-tests.sh bundle --skip-quality

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-component-test-reports
          path: |
            **/target/surefire-reports/
          retention-days: 7

  # System and property tests
  system-adaptation-tests:
    name: System and Adaptation Tests
    needs: atl-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: streamtest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Prepare test environment
        run: chmod +x ./util/test/run-tests.sh

      - name: Run Stream Tests
        run: ./util/test/run-tests.sh stream --skip-quality

      - name: Run Adaptation Tests
        run: ./util/test/run-tests.sh adaptation --skip-quality

      - name: Upload System Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: system-adaptation-test-reports
          path: |
            **/target/surefire-reports/
          retention-days: 7

  # End-to-end and acceptance tests
  machine-acceptance-tests:
    name: Machine and Acceptance Tests
    needs: atl-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Prepare test environment
        run: chmod +x ./util/test/run-tests.sh

      - name: Run Machine Tests
        run: ./util/test/run-tests.sh machine --skip-quality

      - name: Run Acceptance Tests
        run: ./util/test/run-tests.sh acceptance --skip-quality

      - name: Upload BDD Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bdd-test-reports
          path: |
            **/target/cucumber-reports/
          retention-days: 7

  # Quality analysis
  quality-analysis:
    name: Quality Analysis
    needs: [tube-bundle-tests, system-adaptation-tests, machine-acceptance-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for SonarQube analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Prepare quality environment
        run: |
          # Check if quality scripts exist and make them executable
          if [ -f ./util/quality/build-checks.sh ]; then
            chmod +x ./util/quality/build-checks.sh
            echo "Found build-checks.sh script"
          else
            echo "Warning: build-checks.sh not found, will use Maven directly"
          fi

      - name: Run quality checks
        run: |
          if [ -f ./util/quality/build-checks.sh ]; then
            # Run quality checks one by one
            echo "Running quality checks incrementally with build-checks.sh"
            # First run Spotless (code formatting)
            ./util/quality/build-checks.sh --only=spotless || true
            # Then run Checkstyle (code standards)
            ./util/quality/build-checks.sh --only=checkstyle || true
            # Then run SpotBugs (bug detection)
            ./util/quality/build-checks.sh --only=spotbugs || true
            # Finally run JaCoCo (code coverage)
            ./util/quality/build-checks.sh --only=jacoco || true
          else
            echo "Running quality checks directly with Maven"
            # Run quality checks incrementally
            mvn -B spotless:check || true
            mvn -B checkstyle:check || true
            mvn -B spotbugs:check || true
            mvn -B jacoco:report || true
          fi

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-reports

      - name: List downloaded test reports
        run: |
          echo "Downloaded test reports structure:"
          find test-reports -type f | sort

      - name: SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [ -n "$SONAR_TOKEN" ] && [ -n "$SONAR_HOST_URL" ]; then
            echo "Running SonarQube analysis..."
            mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=heymumford_Samstraumr \
              -Dsonar.projectName="Samstraumr" \
              -Dsonar.qualitygate.wait=true \
              -Dsonar.coverage.jacoco.xmlReportPaths=**/jacoco.xml,**/target/site/jacoco/jacoco.xml,test-reports/**/jacoco.xml \
              -Dsonar.java.spotbugs.reportPaths=**/spotbugsXml.xml,**/target/spotbugsXml.xml,test-reports/**/spotbugsXml.xml \
              -Dsonar.java.checkstyle.reportPaths=**/checkstyle-result.xml,**/target/checkstyle-result.xml,test-reports/**/checkstyle-result.xml
          else
            echo "SonarQube analysis skipped - credentials not configured"
          fi

      - name: Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            **/target/site/jacoco/
            **/target/checkstyle-result.xml
            **/target/spotbugsXml.xml
          retention-days: 7