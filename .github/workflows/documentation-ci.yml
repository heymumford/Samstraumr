name: Documentation CI

on:
  push:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
      - 'Samstraumr/samstraumr-core/src/main/java/**/*.java'
      - '.github/workflows/documentation-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.md'
      - 'docs/**'
      - 'Samstraumr/samstraumr-core/src/main/java/**/*.java'
      - '.github/workflows/documentation-ci.yml'
  workflow_dispatch:  # Manual trigger
  release:
    types: [published, prereleased]  # Run on release publication

jobs:
  check-documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for accurate link checking

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven

      - name: Check documentation standards
        id: check_standards
        run: |
          if [ -f "./docs/scripts/check-documentation-standards.sh" ]; then
            ./docs/scripts/check-documentation-standards.sh --check all --report documentation-check-report.md
            echo "standards_check_result=$?" >> $GITHUB_OUTPUT
          else
            echo "Documentation standards check script not found, skipping"
            echo "standards_check_result=0" >> $GITHUB_OUTPUT
          fi

      - name: Check TODO format
        id: check_todos
        run: |
          if [ -f "./docs/scripts/check-todo-format.sh" ]; then
            ./docs/scripts/check-todo-format.sh --high-priority --github-issues
            echo "todo_check_result=$?" >> $GITHUB_OUTPUT
          else
            echo "TODO format check script not found, skipping"
            echo "todo_check_result=0" >> $GITHUB_OUTPUT
          fi

      - name: Check Markdown links
        id: check_links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: 'docs'
          max-depth: 5
          config-file: '.github/workflows/mlc_config.json'
          file-extension: '.md'
          base-branch: 'main'
          check-modified-files-only: 'no'
          continue-on-error: true

      - name: Upload Documentation Check Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation-check-reports
          path: |
            documentation-check-report.md
            todo-report.md

  pre-release-checks:
    name: Pre-Release Documentation Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven

      - name: Set Java module options
        run: |
          echo "JAVA_OPTS=--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED" >> $GITHUB_ENV

      - name: Build project for tests
        run: ./s8r-build fast
        continue-on-error: true

      - name: Check Documentation Completeness
        id: check_completeness
        run: |
          if [ -f "./docs/tools/check-doc-completeness.sh" ]; then
            ./docs/tools/check-doc-completeness.sh
            echo "completeness_check_result=$?" >> $GITHUB_OUTPUT
          else
            echo "Documentation completeness check script not found, skipping"
            echo "completeness_check_result=0" >> $GITHUB_OUTPUT
          fi

      - name: Validate Documentation Examples
        id: validate_examples
        run: |
          if [ -f "./docs/tools/validate-examples.sh" ]; then
            ./docs/tools/validate-examples.sh
            echo "examples_check_result=$?" >> $GITHUB_OUTPUT
          else
            echo "Examples validation script not found, skipping"
            echo "examples_check_result=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload Pre-Release Check Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pre-release-check-reports
          path: |
            target/doc-completeness-reports/
            target/example-validation/reports/

  generate-documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: check-documentation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
          cache: maven

      - name: Set Java module options
        run: |
          echo "JAVA_OPTS=--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED" >> $GITHUB_ENV

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep "version=" "Samstraumr/version.properties" | cut -d= -f2 | tr -d ' \t\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Generate changelog
        run: |
          if [ -f "./docs/tools/generate-changelog.sh" ]; then
            ./docs/tools/generate-changelog.sh --update
          else
            echo "Changelog generation script not found, skipping"
          fi

      - name: Generate API documentation
        run: |
          if [ -f "./docs/tools/generate-javadoc.sh" ]; then
            mkdir -p target/site/docs
            ./docs/tools/generate-javadoc.sh --output target/site/docs/api --links --markdown
          else
            echo "JavaDoc generation script not found, skipping"
          fi

      - name: Update README
        run: |
          if [ -f "./docs/tools/update-readme.sh" ]; then
            ./docs/tools/update-readme.sh
          else
            echo "README update script not found, skipping"
          fi

      - name: Prepare documentation for GitHub Pages
        run: |
          mkdir -p target/site/pages
          cp -R target/site/docs/* target/site/pages/ || true
          cp README.md target/site/pages/index.md || true
          echo "# Samstraumr v${{ steps.get_version.outputs.version }} Documentation" > target/site/pages/README.md
          echo "" >> target/site/pages/README.md
          echo "This documentation was automatically generated by the Documentation CI pipeline." >> target/site/pages/README.md
          echo "" >> target/site/pages/README.md
          echo "- [API Documentation](api/index.html)" >> target/site/pages/README.md
          echo "- [Markdown Documentation](api/markdown/index.html)" >> target/site/pages/README.md
          echo "- [Changelog](../../CHANGELOG.md)" >> target/site/pages/README.md

      - name: Upload Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: target/site/pages

  deploy-to-pages:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: generate-documentation
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Documentation Site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: documentation-site

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: documentation-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  report:
    name: Documentation CI Report
    if: always()
    needs: [check-documentation, pre-release-checks, generate-documentation, deploy-to-pages]
    runs-on: ubuntu-latest
    steps:
      - name: Generate Summary
        run: |
          echo "# 📄 Documentation CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check documentation check job status
          if [ "${{ needs.check-documentation.result }}" == "success" ]; then
            echo "## ✅ Documentation Checks: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.check-documentation.result }}" == "failure" ]; then
            echo "## ❌ Documentation Checks: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Documentation Checks: Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check pre-release checks job status
          if [ "${{ github.event_name }}" == "release" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ needs.pre-release-checks.result }}" == "success" ]; then
              echo "## ✅ Pre-Release Documentation Checks: Passed" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.pre-release-checks.result }}" == "failure" ]; then
              echo "## ❌ Pre-Release Documentation Checks: Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ⚠️ Pre-Release Documentation Checks: Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ℹ️ Pre-Release Documentation Checks: Skipped (only runs on release or manual trigger)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check documentation generation job status
          if [ "${{ needs.generate-documentation.result }}" == "success" ]; then
            echo "## ✅ Documentation Generation: Succeeded" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.generate-documentation.result }}" == "failure" ]; then
            echo "## ❌ Documentation Generation: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Documentation Generation: Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check documentation deployment job status
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "## ℹ️ Documentation Deployment: Skipped (only runs on main branch)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-to-pages.result }}" == "success" ]; then
            echo "## ✅ Documentation Deployment: Succeeded" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-to-pages.result }}" == "failure" ]; then
            echo "## ❌ Documentation Deployment: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Documentation Deployment: Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi