#!/bin/bash
# Samstraumr Version Manager (Consolidated)
# A unified interface for managing project versions
#
# This script consolidates functionality from:
# - util/version (main version management)
# - util/version.sh (legacy wrapper)
# - util/update-version-test.sh (version bump with testing)
# - bin/update-version.sh (redirect script)
#
# Usage:
#   ./util/version <command> [options]
#
# Commands:
#   get                Show current version information
#   export|echo        Output only the current version (for scripts and CI)
#   bump major         Bump the major version (X.y.z → X+1.0.0)
#   bump minor         Bump the minor version (x.Y.z → x.Y+1.0)
#   bump patch         Bump the patch version (x.y.Z → x.y.Z+1)
#   set x.y.z          Set a specific version number
#   verify             Verify that version and tag are in sync
#   fix-tag            Create a git tag matching the current version
#   test               Bump version, run tests, then commit and tag
#   history            Show version history
#
# Options:
#   --no-commit        Don't automatically commit the version change
#   --skip-tests       Skip running tests (for test command only)
#   --skip-quality     Skip quality checks (for test command only)
#   --push             Push changes to remote (for test command only)
#   --help             Show this help message
#
# Note: Other version scripts are now deprecated and will be removed in future releases.

set -e

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print styled messages
print_header() {
  echo -e "${BLUE}===== $1 =====${NC}"
}

print_success() {
  echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
  echo -e "${RED}✗ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}! $1${NC}"
}

print_info() {
  echo -e "${CYAN}→ $1${NC}"
}

# Function to display usage information
show_usage() {
  echo -e "${BLUE}Samstraumr Version Manager${NC}"
  echo "A unified interface for managing project versions"
  echo ""
  echo -e "Usage: ${YELLOW}./util/version <command> [options]${NC}"
  echo ""
  echo "Commands:"
  echo "  get                Show current version information"
  echo "  export|echo        Output only the current version (for scripts and CI)"
  echo "  bump major         Bump the major version (X.y.z → X+1.0.0)"
  echo "  bump minor         Bump the minor version (x.Y.z → x.Y+1.0)"
  echo "  bump patch         Bump the patch version (x.y.Z → x.y.Z+1)"
  echo "  set x.y.z          Set a specific version number"
  echo "  verify             Verify that version and tag are in sync"
  echo "  fix-tag            Create a git tag matching the current version"
  echo "  test               Bump version, run tests, then commit and tag"
  echo "  history            Show version history"
  echo ""
  echo "Options:"
  echo "  --no-commit        Don't automatically commit the version change"
  echo "  --skip-tests       Skip running tests (for test command only)"
  echo "  --skip-quality     Skip quality checks (for test command only)"
  echo "  --push             Push changes to remote (for test command only)"
  echo "  --help             Show this help message"
}

# Get script directory and project root
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." &> /dev/null && pwd 2> /dev/null || echo "$SCRIPT_DIR")"

# Change to project root directory
cd "$PROJECT_ROOT"

# Source the configuration file if it exists
if [ -f "${PROJECT_ROOT}/.samstraumr.config" ]; then
  source "${PROJECT_ROOT}/.samstraumr.config"
fi

# Version file path - fallback to default if not defined in config
VERSION_PROPERTIES_FILE="${VERSION_PROPERTIES_FILE:-Samstraumr/version.properties}"

# Check if version.properties exists
if [ ! -f "$VERSION_PROPERTIES_FILE" ]; then
  print_error "Version properties file not found at: $VERSION_PROPERTIES_FILE"
  exit 1
fi

# Function to get the current version
get_current_version() {
  grep "samstraumr.version=" "$VERSION_PROPERTIES_FILE" | cut -d= -f2
}

# Function to get the last updated date
get_last_updated() {
  grep "samstraumr.last.updated=" "$VERSION_PROPERTIES_FILE" | cut -d= -f2
}

# Function to show current version info
show_version_info() {
  local version=$(get_current_version)
  local updated=$(get_last_updated)
  local maintainer=$(grep "samstraumr.maintainer=" "$VERSION_PROPERTIES_FILE" | cut -d= -f2)
  local license=$(grep "samstraumr.license=" "$VERSION_PROPERTIES_FILE" | cut -d= -f2)
  
  print_header "Samstraumr Version Information"
  echo -e "Version:     ${GREEN}$version${NC}"
  echo -e "Updated:     ${CYAN}$updated${NC}"
  echo -e "Maintainer:  ${CYAN}$maintainer${NC}"
  echo -e "License:     ${CYAN}$license${NC}"
}

# Function to calculate a new version number
calculate_new_version() {
  local current_version=$(get_current_version)
  local bump_type=$1
  
  # Split version into components
  IFS='.' read -r major minor patch <<< "$current_version"
  
  case "$bump_type" in
    major)
      echo "$((major + 1)).0.0"
      ;;
    minor)
      echo "$major.$((minor + 1)).0"
      ;;
    patch)
      echo "$major.$minor.$((patch + 1))"
      ;;
    *)
      print_error "Invalid bump type: $bump_type"
      exit 1
      ;;
  esac
}

# Function to update version in all files
update_version() {
  local current_version=$(get_current_version)
  local new_version=$1
  
  print_header "Updating Version to $new_version"
  echo -e "Current version: ${YELLOW}$current_version${NC}"
  echo -e "New version:     ${GREEN}$new_version${NC}"
  
  # Update version.properties - This is the source of truth for version
  sed -i "s/samstraumr.version=.*/samstraumr.version=$new_version/" "$VERSION_PROPERTIES_FILE"
  print_success "Updated version.properties"
  
  # Update last updated date
  local today=$(date +"%B %d, %Y")
  sed -i "s/samstraumr.last.updated=.*/samstraumr.last.updated=$today/" "$VERSION_PROPERTIES_FILE"
  print_success "Updated last updated date to $today"
  
  # Update all POM files including parent and all modules
  # This ensures consistent version across all modules
  local pom_files=(
    "pom.xml"
    "Samstraumr/pom.xml"
    "Samstraumr/samstraumr-core/pom.xml"
  )
  
  echo "Updating version in POM files:"
  for pom_file in "${pom_files[@]}"; do
    if [ -f "$pom_file" ]; then
      # Update version tags
      sed -i "s/<version>$current_version<\/version>/<version>$new_version<\/version>/g" "$pom_file"
      # Update properties
      sed -i "s/<samstraumr.version>$current_version<\/samstraumr.version>/<samstraumr.version>$new_version<\/samstraumr.version>/g" "$pom_file"
      # Update parent version references if applicable
      sed -i "s/<parent>.*<version>$current_version<\/version>/<parent>\\n    <groupId>org.samstraumr<\/groupId>\\n    <artifactId>samstraumr-modules<\/artifactId>\\n    <version>$new_version<\/version>/g" "$pom_file"
      echo "  - Updated $pom_file"
    fi
  done
  print_success "Updated all POM files to version $new_version"
  
  # Update README.md version and badge
  if [ -f "README.md" ]; then
    # Update version string
    sed -i "s/Version: .*/Version: $new_version/g" README.md
    # Update version badge URL
    sed -i "s|version-[0-9.]\+-blue|version-$new_version-blue|g" README.md
    print_success "Updated version and badge in README.md"
  fi
  
  # Apply code formatting after version update
  print_header "Running Quality Checks After Version Update"
  # Run Spotless to ensure formatting is correct after changes
  if command -v mvn &> /dev/null; then
    echo "Running Spotless formatting check..."
    if mvn spotless:apply -q; then
      print_success "Code formatting applied successfully"
    else
      print_warning "Spotless formatting failed - some files may need manual formatting"
    fi
  else
    print_warning "Maven not available - skipping formatting check"
  fi
  
  print_header "Version Update Complete"
  echo "All files have been updated to version $new_version"
  echo "Changes will be committed automatically unless --no-commit was specified"
  echo ""
  echo "To build the project with the new version, run:"
  echo -e "  ${CYAN}./util/build/build-optimal.sh clean${NC}"
}

# Function to check if tag exists
tag_exists() {
  local tag_name=$1
  if git tag | grep -q "^$tag_name$"; then
    return 0  # Tag exists
  else
    return 1  # Tag doesn't exist
  fi
}

# Function to check if version matches git tag
version_matches_tag() {
  local version=$1
  local tag_name="v$version"
  
  # First check if tag exists
  if tag_exists "$tag_name"; then
    return 0  # Tag exists and matches version
  else
    return 1  # Tag doesn't exist or doesn't match
  fi
}

# Function to commit version changes and create a tag
commit_version_changes() {
  local new_version=$1
  local bump_type=$2
  local tag_name="v$new_version"
  
  # Check if tag already exists
  if tag_exists "$tag_name"; then
    print_error "Tag $tag_name already exists. Cannot create duplicate tag."
    print_warning "Run 'git tag -d $tag_name' to delete the existing tag if needed."
    return 1
  fi
  
  print_info "Creating commit for version $new_version"
  
  local file_list=(
    "README.md"
    "$VERSION_PROPERTIES_FILE"
    "pom.xml"
    "Samstraumr/pom.xml"
    "Samstraumr/samstraumr-core/pom.xml"
    "docs/guides/getting-started.md"
    "CLAUDE.md"
    "util/badges/generate-badges.sh"
    ".github/workflows/samstraumr-pipeline.yml"
  )
  
  # Only add files that exist and have changes
  local changed_files=()
  for file in "${file_list[@]}"; do
    if [ -f "$file" ] && git diff --quiet -- "$file"; then
      continue
    elif [ -f "$file" ]; then
      changed_files+=("$file")
    fi
  done
  
  if [ ${#changed_files[@]} -eq 0 ]; then
    print_warning "No files changed, skipping commit"
    return
  fi
  
  # Create Git commit with proper message
  git add "${changed_files[@]}"
  
  case "$bump_type" in
    major)
      commit_message="Bump major version to $new_version

* Update version from $(get_current_version) to $new_version
* Major version change indicates breaking API changes
* Update last updated date to $(date +"%B %d, %Y")"
      ;;
    minor)
      commit_message="Bump minor version to $new_version

* Update version from $(get_current_version) to $new_version
* Minor version change indicates new features without breaking changes
* Update last updated date to $(date +"%B %d, %Y")"
      ;;
    patch)
      commit_message="Bump patch version to $new_version

* Update version from $(get_current_version) to $new_version
* Patch version change indicates bug fixes and small improvements
* Update last updated date to $(date +"%B %d, %Y")"
      ;;
    set)
      commit_message="Set version to $new_version

* Update version from $(get_current_version) to $new_version
* Update last updated date to $(date +"%B %d, %Y")"
      ;;
  esac
  
  # Add Claude attribution
  commit_message="$commit_message

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
  
  # Create the commit
  git commit -m "$commit_message"
  print_success "Created version commit"
  
  # Automatically create a git tag to ensure version-tag consistency
  print_info "Creating git tag for version $new_version"
  
  # Create an annotated tag
  git tag -a "$tag_name" -m "Version $new_version

Release version $new_version of Samstraumr.

Generated with Claude Code"
  
  print_success "Created git tag $tag_name"
  echo "To push the tag to remote, use:"
  echo -e "  ${YELLOW}git push && git push origin $tag_name${NC}"
  
  # Suggest performing a verification check
  print_info "Version and tag are now synchronized at $new_version"
}

# Function to display version history
show_version_history() {
  print_header "Samstraumr Version History"
  git log --oneline --grep="Bump version to\|Bump major version to\|Bump minor version to\|Bump patch version to\|Set version to" | head -15
}

# Function to verify versions and tags are in sync
verify_version_tag_alignment() {
  local current_version=$(get_current_version)
  local tag_name="v$current_version"
  
  print_header "Version-Tag Alignment Check"
  
  echo -e "Current version: ${GREEN}$current_version${NC}"
  
  if tag_exists "$tag_name"; then
    print_success "Tag $tag_name exists and matches current version"
    return 0
  else
    print_error "Tag $tag_name does not exist"
    echo "To create the tag, run:"
    echo -e "  ${YELLOW}git tag -a \"$tag_name\" -m \"Version $current_version\"${NC}"
    echo "Or run:" 
    echo -e "  ${YELLOW}./util/version fix-tag${NC}"
    return 1
  fi
}

# Function to fix version-tag misalignment
fix_version_tag_misalignment() {
  local current_version=$(get_current_version)
  local tag_name="v$current_version"
  
  print_header "Version-Tag Alignment Fix"
  
  echo -e "Current version: ${GREEN}$current_version${NC}"
  
  if tag_exists "$tag_name"; then
    print_success "Tag $tag_name already exists and matches current version"
    return 0
  else
    print_info "Creating tag $tag_name for current version $current_version"
    
    # Create an annotated tag
    git tag -a "$tag_name" -m "Version $current_version

Release version $current_version of Samstraumr.

Generated with Claude Code"
    
    print_success "Created git tag $tag_name"
    echo "To push the tag to remote, use:"
    echo -e "  ${YELLOW}git push origin $tag_name${NC}"
    
    return 0
  fi
}

# Function to perform version bump with testing
test_version_bump() {
  local bump_type=$1
  local skip_tests=$2
  local skip_quality=$3
  local push_changes=$4
  
  print_header "Version Bump with Testing"
  
  # Step 1: Calculate new version
  local current_version=$(get_current_version)
  local new_version=$(calculate_new_version "$bump_type")
  
  echo -e "Current version: ${YELLOW}$current_version${NC}"
  echo -e "New version:     ${GREEN}$new_version${NC}"
  
  # Step 2: Bump the version without committing
  update_version "$new_version"
  
  # Step 3: Run code formatting if not skipped
  if [ "$skip_quality" = false ]; then
    print_header "Running Code Formatting"
    if command -v mvn &> /dev/null; then
      mvn spotless:apply
      print_success "Code formatting applied"
    else
      print_warning "Maven not available - skipping formatting"
    fi
  fi
  
  # Step 4: Run tests if not skipped
  if [ "$skip_tests" = false ]; then
    print_header "Running ATL Tests"
    if [ -f "$PROJECT_ROOT/util/test-run-atl.sh" ]; then
      "$PROJECT_ROOT/util/test-run-atl.sh"
      print_success "All tests passed"
    else
      print_warning "Test script not found - skipping tests"
    fi
  fi
  
  # Step 5: Commit and tag
  commit_version_changes "$new_version" "$bump_type"
  
  # Step 6: Push changes if requested
  if [ "$push_changes" = true ]; then
    print_header "Pushing Changes to Remote"
    echo "Pushing commits and tags to remote repository..."
    
    # Push commits
    git push
    
    # Push tag
    git push origin "v$new_version"
    
    print_success "All changes and tags have been pushed to remote"
  else
    echo ""
    echo "To push the changes and tag to the remote repository, run:"
    echo -e "  ${YELLOW}git push && git push origin v$new_version${NC}"
  fi
}

# Main command processing
if [ $# -eq 0 ]; then
  show_usage
  exit 0
fi

COMMAND=$1
shift

# Default options
AUTO_COMMIT=true
BUMP_TYPE=""
SKIP_TESTS=false
SKIP_QUALITY=false
PUSH_CHANGES=false

# First argument for "bump" command is the type, don't treat it as an option
if [ "$COMMAND" = "bump" ] && [ $# -gt 0 ]; then
  BUMP_TYPE=$1
  shift
fi

# First argument for "set" command is the version, don't treat it as an option
if [ "$COMMAND" = "set" ] && [ $# -gt 0 ]; then
  NEW_VERSION=$1
  shift
fi

# First argument for "test" command is the bump type, don't treat it as an option
if [ "$COMMAND" = "test" ] && [ $# -gt 0 ]; then
  if [[ "$1" =~ ^(major|minor|patch)$ ]]; then
    BUMP_TYPE=$1
    shift
  else
    BUMP_TYPE="patch"  # Default to patch if not specified
  fi
fi

# Process options
while [ $# -gt 0 ]; do
  case "$1" in
    --no-commit)
      AUTO_COMMIT=false
      shift
      ;;
    --skip-tests)
      SKIP_TESTS=true
      shift
      ;;
    --skip-quality)
      SKIP_QUALITY=true
      shift
      ;;
    --push)
      PUSH_CHANGES=true
      shift
      ;;
    --help)
      show_usage
      exit 0
      ;;
    *)
      print_error "Unknown option: $1"
      show_usage
      exit 1
      ;;
  esac
done

# Process commands
case "$COMMAND" in
  get)
    show_version_info
    ;;
  
  export|echo)
    echo "$(get_current_version)"
    ;;
  
  verify)
    verify_version_tag_alignment
    ;;
  
  fix-tag)
    fix_version_tag_misalignment
    ;;

  test)
    if [ -z "$BUMP_TYPE" ]; then
      BUMP_TYPE="patch"  # Default to patch if not specified
    fi
    
    if [[ ! "$BUMP_TYPE" =~ ^(major|minor|patch)$ ]]; then
      print_error "Invalid bump type: $BUMP_TYPE. Must be major, minor, or patch."
      exit 1
    fi
    
    test_version_bump "$BUMP_TYPE" "$SKIP_TESTS" "$SKIP_QUALITY" "$PUSH_CHANGES"
    ;;
  
  bump)
    if [ -z "$BUMP_TYPE" ]; then
      print_error "Missing bump type (major, minor, patch)"
      show_usage
      exit 1
    fi
    
    if [[ ! "$BUMP_TYPE" =~ ^(major|minor|patch)$ ]]; then
      print_error "Invalid bump type: $BUMP_TYPE. Must be major, minor, or patch."
      exit 1
    fi
    
    # Get current version and calculate new version
    CURRENT_VERSION=$(get_current_version)
    NEW_VERSION=$(calculate_new_version "$BUMP_TYPE")
    
    # Verify current version and tag are in sync before proceeding
    current_tag="v$CURRENT_VERSION"
    if ! tag_exists "$current_tag"; then
      print_warning "Current version $CURRENT_VERSION does not have a matching tag $current_tag"
      echo -n "Do you want to continue bumping the version anyway? (y/n): "
      read -r response
      if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        print_error "Aborting version bump. Please run './util/version verify' to check status."
        exit 1
      fi
    fi
    
    # Proceed with version update
    update_version "$NEW_VERSION"
    
    if [ "$AUTO_COMMIT" = true ]; then
      commit_version_changes "$NEW_VERSION" "$BUMP_TYPE"
    else
      print_info "Changes not committed (--no-commit option used)"
      print_info "To commit changes manually, use:"
      echo -e "  ${YELLOW}git add README.md $VERSION_PROPERTIES_FILE pom.xml Samstraumr/pom.xml Samstraumr/samstraumr-core/pom.xml${NC}"
      echo -e "  ${YELLOW}git commit -m \"Bump $BUMP_TYPE version to $NEW_VERSION\"${NC}"
      echo -e "  ${YELLOW}git tag -a \"v$NEW_VERSION\" -m \"Version $NEW_VERSION\"${NC}"
    fi
    ;;
  
  set)
    if [ -z "$NEW_VERSION" ]; then
      print_error "Missing version number to set"
      show_usage
      exit 1
    fi
    # Validate version format (x.y.z)
    if ! [[ $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      print_error "Invalid version format: $NEW_VERSION. Must be in format x.y.z"
      exit 1
    fi
    
    # Verify the version we're setting doesn't already have a tag
    new_tag="v$NEW_VERSION"
    if tag_exists "$new_tag"; then
      print_error "Tag $new_tag already exists. Cannot set version to $NEW_VERSION."
      print_warning "Run 'git tag -d $new_tag' to delete the existing tag if needed."
      exit 1
    fi
    
    update_version "$NEW_VERSION"
    
    if [ "$AUTO_COMMIT" = true ]; then
      commit_version_changes "$NEW_VERSION" "set"
    else
      print_info "Changes not committed (--no-commit option used)"
      print_info "To commit changes manually, use:"
      echo -e "  ${YELLOW}git add README.md $VERSION_PROPERTIES_FILE pom.xml Samstraumr/pom.xml Samstraumr/samstraumr-core/pom.xml${NC}"
      echo -e "  ${YELLOW}git commit -m \"Set version to $NEW_VERSION\"${NC}"
      echo -e "  ${YELLOW}git tag -a \"v$NEW_VERSION\" -m \"Version $NEW_VERSION\"${NC}"
    fi
    ;;
  
  history)
    show_version_history
    ;;
  
  *)
    print_error "Unknown command: $COMMAND"
    show_usage
    exit 1
    ;;
esac

exit 0